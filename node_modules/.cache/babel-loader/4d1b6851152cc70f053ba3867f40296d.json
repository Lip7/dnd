{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\ASE\\\\project thingy\\\\thingy-client-purple\\\\src\\\\components\\\\common\\\\auth-verify.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\"; //used to get the expiration time\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst parseJwt = token => {\n  try {\n    return JSON.parse(atob(token.split('.')[1]));\n  } catch (e) {\n    return null;\n  }\n}; //check everytime going to another route if token is not expired\n//if token is expired, logout\n\n\nclass AuthVerify extends Component {\n  constructor(props) {\n    super(props);\n    props.history.listen(() => {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n\n      if (user) {\n        const decodedJwt = parseJwt(user.access_token); //logout if current time is bigger than token expiration time\n\n        if (decodedJwt.exp * 1000 < Date.now()) {\n          props.logOut();\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(AuthVerify);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/ASE/project thingy/thingy-client-purple/src/components/common/auth-verify.js"],"names":["React","Component","withRouter","parseJwt","token","JSON","parse","atob","split","e","AuthVerify","constructor","props","history","listen","user","localStorage","getItem","decodedJwt","access_token","exp","Date","now","logOut","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CAEA;;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB,MAAI;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAP;AACH,GAFD,CAEE,OAAOC,CAAP,EAAU;AACR,WAAO,IAAP;AACH;AACJ,CAND,C,CAQA;AACA;;;AACA,MAAMC,UAAN,SAAyBT,SAAzB,CAAmC;AAC/BU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEAA,IAAAA,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqB,MAAM;AACvB,YAAMC,IAAI,GAAGV,IAAI,CAACC,KAAL,CAAWU,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;;AACA,UAAIF,IAAJ,EAAU;AACL,cAAMG,UAAU,GAAGf,QAAQ,CAACY,IAAI,CAACI,YAAN,CAA3B,CADK,CAGL;;AACA,YAAID,UAAU,CAACE,GAAX,GAAe,IAAf,GAAoBC,IAAI,CAACC,GAAL,EAAxB,EAAoC;AACjCV,UAAAA,KAAK,CAACW,MAAN;AACH;AACJ;AACJ,KAVD;AAWH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAnB8B;;AAsBnC,oBAAetB,UAAU,CAACQ,UAAD,CAAzB","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n//used to get the expiration time\r\nconst parseJwt = (token) => {\r\n    try {\r\n        return JSON.parse(atob(token.split('.')[1]));\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n};\r\n\r\n//check everytime going to another route if token is not expired\r\n//if token is expired, logout\r\nclass AuthVerify extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        props.history.listen(() => {\r\n            const user = JSON.parse(localStorage.getItem(\"user\"));\r\n            if (user) {\r\n                 const decodedJwt = parseJwt(user.access_token);\r\n\r\n                 //logout if current time is bigger than token expiration time\r\n                 if (decodedJwt.exp*1000<Date.now()) {\r\n                    props.logOut();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div></div>;\r\n    }\r\n}\r\n\r\nexport default withRouter(AuthVerify);"]},"metadata":{},"sourceType":"module"}