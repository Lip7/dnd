{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\SecondSemester\\\\MMI\\\\thingy-client-purple\\\\src\\\\components\\\\StudySession.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './StudySession.css';\nimport AreaRechartComponent from \"./AreaRechartComponent\";\nimport ScrollToTop from \"./ScrollToTop/ScrollToTop\"; // Notify user with short messages\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport authHeader from \"./services/authheader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"http://localhost:8080\";\n\nclass StudySession extends Component {\n  constructor() {\n    super(); // Update input title to state.currentTitle\n\n    this.createSessionHandler = async e => {\n      //start interval for updating current measurements\n      this.myInterval = setInterval(this.getMeasurements, 10000); //every 10 seconds\n\n      e.preventDefault();\n      let new_session = {\n        session_id: this.state.sessions.length,\n        session_name: this.state.currentTitle,\n        session_stopped: 0 //session_breakTime: 0,\n\n      }; // Send creation of session to backend and get the session_start of the backend\n\n      console.log(\"This data will be sent to the backend: \", new_session);\n      await axios.post(baseURL + '/session/', new_session, {\n        headers: authHeader()\n      }).then(resp => {\n        console.log(\"create Session respond:\", resp);\n        new_session[\"session_start\"] = resp[\"data\"][\"session_start\"];\n\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      }); // Add the created session to the list of sessions\n\n      let sessions = [new_session, ...this.state.sessions]; // Change session ongoing to true\n\n      await this.setState({\n        session_ongoing: 1\n      });\n      await this.setState({\n        ongoing_session_id: new_session.session_id\n      });\n      await this.getMeasurements();\n      await this.setState({\n        sessions\n      });\n      console.log(\"State after created session: \", this.state);\n    };\n\n    this.stopSessionHandler = async e => {\n      e.preventDefault();\n      let sessions;\n      await axios.post(baseURL + '/session/stop/', {}, {\n        headers: authHeader()\n      }).then(resp => {\n        sessions = this.state.sessions.map(session => session.session_id === this.state.sessions.length - 1 ? { ...session,\n          session_end: resp[\"data\"][\"session_end\"],\n          session_stopped: 1\n        } : session);\n        console.log(\"sessions after stopped\", this.state);\n\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      }); //get measurements\n\n      await this.getMeasurements(); //get session with id\n\n      let newSession = await this.getSessionById(sessions[0].session_id);\n      sessions[0] = newSession;\n      await this.setState({\n        session_ongoing: 0\n      }); // Set new sessions\n\n      await this.setState({\n        sessions\n      });\n      clearInterval(this.myInterval); //stop interval for updating current measurements\n    };\n\n    this.getSessionById = async id => {\n      let session = \"\";\n      await axios.get(baseURL + /session/ + id, {\n        headers: authHeader()\n      }).then(res => {\n        let data = res.data;\n        session = data;\n      });\n      return session;\n    };\n\n    this.getMeasurements = async () => {\n      //get CO2 for all sessions and store it, so it can be used for area chart\n      await axios.get(baseURL + \"/CO2/\", {\n        headers: authHeader()\n      }).then(res => {\n        let data = res.data;\n        console.log(\"DATA CO2: \", data); //dictionary will then be stored in allSessionsCO2. As format for area chart\n\n        let newDict = []; //iterate over whole data to get key (id of session) and value (list of all CO2 measurements)\n\n        Object.entries(data).length > 0 && Object.entries(data).map(([key, value]) => {\n          //array to store each dict of one session which is used for area chart: name and CO2\n          let array = []; //console.log(key, value)\n\n          Object.entries(value).map(([index, oneMeasure]) => {\n            array.push({\n              name: \"\",\n              CO2: oneMeasure\n            });\n          }); //add each session to the new dictionary\n\n          newDict.push({\n            id: key,\n            measurements: array\n          });\n        }); //set state to the new dictionary\n\n        this.setState({\n          allSessionsCO2: newDict\n        });\n      }); //same as above but for temp: get temp for all sessions and store it, so it can be used for area chart\n\n      await axios.get(baseURL + \"/temp/\", {\n        headers: authHeader()\n      }).then(res => {\n        let data = res.data;\n        console.log(\"DATA TEMP\", data); //dictionary will then be stored in allSessionsTemp. As format for area chart\n\n        let newDict = []; //iterate over whole data to get key (nid of session) and value (list of all temp measurements)\n\n        Object.entries(data).length > 0 && Object.entries(data).map(([key, value]) => {\n          //array to store each dict of one session which is used for area chart: name and temp\n          let array = [];\n          Object.entries(value).map(([index, oneMeasure]) => {\n            array.push({\n              name: \"\",\n              Temperature: oneMeasure\n            });\n          }); //add each session to the new dictionary\n\n          newDict.push({\n            id: key,\n            measurements: array\n          });\n        }); //set state to the new dictionary\n\n        this.setState({\n          allSessionsTemp: newDict\n        });\n      });\n    };\n\n    this.deleteSessionHandler = async e => {\n      e.preventDefault();\n      let sessions = [];\n      this.setState({\n        sessions\n      });\n      axios.delete(baseURL + '/session/', {\n        headers: authHeader()\n      }).then(resp => {\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      });\n      await this.getMeasurements();\n    };\n\n    this.checkNotificationsHandler = async () => {\n      // Get all notifications from backend\n      await axios.get(baseURL + \"/session/check/\", {\n        headers: authHeader()\n      }).then(res => {\n        let data = res.data; // Overwrite the notification values from the backend\n\n        this.setState({\n          list_of_notifications: data\n        });\n      }); // Check notifications and alarm the user\n\n      if (this.state.list_of_notifications.make_break) {\n        toast.warning('You need a break! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          make_break: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.open_window) {\n        toast.warning('You need to open the window! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          open_window: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.air_quality_wrong) {\n        toast.warning('You need to open the window since the air quality is bad! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          air_quality_wrong: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.alarm_humidity_wrong) {\n        toast.warning('You need to open the window since the humidity is bad! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          alarm_humidity_wrong: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.alarm_temperature_cold) {\n        toast.warning('It is colder than the limited set in settings! Turn on the heating! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          alarm_temperature_cold: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.alarm_temperature_hot) {\n        toast.warning('It is colder than the limited set in settings! Turn off the heating or open the window! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          alarm_temperature_hot: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      inform_notifications_every_sec: 30000,\n      // every x seconds check for notifications and inform the user\n      session_ongoing: 0,\n      // Boolean: is there a current session ongoing? then do not show delete button\n      ongoing_session_id: \"\",\n      currentTitle: \"\",\n      // currentTitle to be set by the user -> will be pushed to the backend as session_name when creating a new session\n      //How our sessions are structured:\n      sessions: [{\n        session_id: 1,\n        // Every session has an unique ID\n        session_name: \"Name of Session\",\n        // Name of the session\n        session_start: \"20.12.2021\",\n        // date and time the session started\n        session_end: \"21.12.2021\",\n        // date and time the session stopped\n        session_breakTime: \"21.12.2021\",\n        // date and time when the next break is\n        session_duration: 7,\n        // date and time between start and end\n        session_stopped: 0 // true if the session was stopped, false if it is still ongoing\n\n      }],\n      // Will be updated by the server and received from the backend with a get every x seconds\n      list_of_notifications: {\n        open_window: false,\n        make_break: false,\n        alarm_humidity_wrong: false,\n        air_quality_wrong: false,\n        alarm_temperature_cold: false,\n        alarm_temperature_hot: false\n      },\n      currentCO2: \"\",\n      currentTemp: \"\",\n      avgCO2: \"example\",\n      avgTemp: \"example\",\n      allSessionsTemp: [],\n      //list of all temp measurements (all sessions)\n      allSessionsCO2: [] //list of all co2 measurements (all sessions)\n\n    };\n  }\n\n  async componentDidMount() {\n    //get current measurements\n    await this.getMeasurements(); // Update notifications every x seconds\n\n    await this.checkNotificationsHandler();\n    this.mySecondInterval = setInterval(this.checkNotificationsHandler, this.state.inform_notifications_every_sec); // Get all sessions from backend\n\n    await axios.get(baseURL + \"/session/\", {\n      headers: authHeader()\n    }).then(res => {\n      let data = res.data;\n      this.setState({\n        sessions: data.reverse()\n      }); // check if a session is ongoing\n\n      if (this.state.sessions.length > 0) {\n        if (this.state.sessions[this.state.sessions.length - 1].session_stopped) {\n          this.setState({\n            session_ongoing: 0\n          });\n        } else {\n          this.setState({\n            session_ongoing: 1\n          });\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n    clearInterval(this.mySecondInterval);\n  } // Input user for title of a session\n\n\n  handleChange(event) {\n    event.preventDefault();\n    this.setState({\n      currentTitle: event.target.value\n    });\n  } // Creates Session and increments number of session and ongoing session will be true\n\n\n  render() {\n    // List of all sessions completed\n    let sessionsList = this.state.sessions.map(session => {\n      if (session.session_stopped) {\n        //iterate to find temp measurements of the right id\n        let sessionMeasTemp = null;\n        this.state.allSessionsTemp.map(entry => {\n          if (entry.id == session.session_id) {\n            sessionMeasTemp = entry.measurements;\n          }\n        }); //iterate to find co2 measurements of the right id\n\n        let sessionMeasCO2 = null;\n        this.state.allSessionsCO2.map(entry => {\n          if (entry.id == session.session_id) {\n            sessionMeasCO2 = entry.measurements;\n            sessionMeasCO2 = entry.measurements;\n          }\n        });\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sessionElem\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: session.session_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 36\n              }, this), \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Session ID:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 68\n              }, this), \" \", session.session_id, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 33\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Session Start:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 116\n              }, this), \" \", session.session_start, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Session End:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 74\n              }, this), \" \", session.session_end]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 113\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Average Temperature: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 36\n              }, this), session.average_temp.toFixed(1), \"\\xB0 C | \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: [\"Average CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n                  children: \"2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 116\n                }, this), \": \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 103\n              }, this), session.average_co2.toFixed(1), \" CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n                children: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 169\n              }, this), \"e\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 33\n            }, this), sessionMeasTemp == null ? \"\" : /*#__PURE__*/_jsxDEV(AreaRechartComponent, {\n              type: \"Temperature\",\n              data: sessionMeasTemp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 65\n            }, this), sessionMeasCO2 == null ? \"\" : /*#__PURE__*/_jsxDEV(AreaRechartComponent, {\n              type: \"CO2\",\n              data: sessionMeasCO2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 64\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 29\n          }, this)\n        }, session.session_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 25\n        }, this);\n      }\n    }); // List of current active session\n\n    let currentSession = this.state.sessions.map(session => {\n      if (!session.session_stopped) {\n        //iterate to find temp measurements of the right id\n        let sessionMeasTemp = [];\n        this.state.allSessionsTemp.map(entry => {\n          if (entry.id == session.session_id) {\n            sessionMeasTemp = entry.measurements;\n          }\n        }); //iterate to find co2 measurements of the right id\n\n        let sessionMeasCO2 = [];\n        this.state.allSessionsCO2.map(entry => {\n          if (entry.id == session.session_id) {\n            sessionMeasCO2 = entry.measurements;\n          }\n        }); //show ongoing session data\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: session.session_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 32\n            }, this), \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Session ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 64\n            }, this), \" \", session.session_id, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 29\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Session Start:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 112\n            }, this), \" \", session.session_start]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 109\n          }, this), this.state.sessions.length != 0 && sessionMeasTemp.length != 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Current Temperature:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 90\n            }, this), \" \", sessionMeasTemp[sessionMeasTemp.length - 1].Temperature, \"\\xB0 C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 87\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Current Temp:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 184\n            }, this), \" Not measured yet\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 181\n          }, this), this.state.sessions.length != 0 && sessionMeasCO2.length != 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\"Current CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n                children: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 102\n              }, this), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 89\n            }, this), \" \", sessionMeasCO2[sessionMeasCO2.length - 1].CO2, \" CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n              children: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 168\n            }, this), \"e\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 86\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\"Current CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n                children: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 202\n              }, this), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 189\n            }, this), \" Not measured yet\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 186\n          }, this)]\n        }, session.session_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 25\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n        autoClose: false,\n        limit: 1,\n        position: \"top-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"backgroundStudySession\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elem\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"STUDY SESSION\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Current study sessions: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Name: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Enter an optional name\",\n                onKeyPress: e => {\n                  e.key === 'Enter' && e.preventDefault();\n                },\n                value: this.state.currentTitle,\n                onChange: this.handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 33\n          }, this), this.state.session_ongoing !== 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: this.createSessionHandler,\n            children: \"Create New Session\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: this.stopSessionHandler,\n            children: \"Stop Session\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 35\n          }, this), currentSession, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 29\n          }, this), this.state.sessions.length > 0 && this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Past study sessions: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 29\n          }, this), this.state.sessions.length > 0 && !this.state.session_ongoing && this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: this.deleteSessionHandler,\n            children: \"Delete all Sessions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 29\n          }, this), sessionsList]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nexport default StudySession;","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/SecondSemester/MMI/thingy-client-purple/src/components/StudySession.js"],"names":["React","Component","axios","AreaRechartComponent","ScrollToTop","ToastContainer","toast","authHeader","baseURL","StudySession","constructor","createSessionHandler","e","myInterval","setInterval","getMeasurements","preventDefault","new_session","session_id","state","sessions","length","session_name","currentTitle","session_stopped","console","log","post","headers","then","resp","status","Error","catch","err","response","setState","session_ongoing","ongoing_session_id","stopSessionHandler","map","session","session_end","newSession","getSessionById","clearInterval","id","get","res","data","newDict","Object","entries","key","value","array","index","oneMeasure","push","name","CO2","measurements","allSessionsCO2","Temperature","allSessionsTemp","deleteSessionHandler","delete","checkNotificationsHandler","list_of_notifications","make_break","warning","open_window","air_quality_wrong","alarm_humidity_wrong","alarm_temperature_cold","alarm_temperature_hot","handleChange","bind","inform_notifications_every_sec","session_start","session_breakTime","session_duration","currentCO2","currentTemp","avgCO2","avgTemp","componentDidMount","mySecondInterval","reverse","componentWillUnmount","event","target","render","sessionsList","sessionMeasTemp","entry","sessionMeasCO2","average_temp","toFixed","average_co2","currentSession"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport './StudySession.css';\r\nimport AreaRechartComponent from \"./AreaRechartComponent\";\r\nimport ScrollToTop from \"./ScrollToTop/ScrollToTop\";\r\n\r\n// Notify user with short messages\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport authHeader from \"./services/authheader\";\r\n\r\nconst baseURL = \"http://localhost:8080\"\r\n\r\n\r\nclass StudySession extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Update input title to state.currentTitle\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.state = {\r\n            inform_notifications_every_sec: 30000, // every x seconds check for notifications and inform the user\r\n            session_ongoing: 0, // Boolean: is there a current session ongoing? then do not show delete button\r\n            ongoing_session_id: \"\",\r\n            currentTitle: \"\", // currentTitle to be set by the user -> will be pushed to the backend as session_name when creating a new session\r\n            //How our sessions are structured:\r\n            sessions: [\r\n                {\r\n                    session_id: 1, // Every session has an unique ID\r\n                    session_name: \"Name of Session\", // Name of the session\r\n                    session_start: \"20.12.2021\", // date and time the session started\r\n                    session_end: \"21.12.2021\", // date and time the session stopped\r\n                    session_breakTime: \"21.12.2021\", // date and time when the next break is\r\n                    session_duration: 7, // date and time between start and end\r\n                    session_stopped: 0 // true if the session was stopped, false if it is still ongoing\r\n                }\r\n            ],\r\n\r\n            // Will be updated by the server and received from the backend with a get every x seconds\r\n            list_of_notifications:{\r\n                open_window: false,\r\n                make_break: false,\r\n                alarm_humidity_wrong: false,\r\n                air_quality_wrong: false,\r\n                alarm_temperature_cold: false,\r\n                alarm_temperature_hot: false,\r\n            },\r\n\r\n            currentCO2: \"\",\r\n            currentTemp: \"\",\r\n            avgCO2:\"example\",\r\n            avgTemp:\"example\",\r\n\r\n            allSessionsTemp:[], //list of all temp measurements (all sessions)\r\n            allSessionsCO2: [], //list of all co2 measurements (all sessions)\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        //get current measurements\r\n        await this.getMeasurements()\r\n\r\n        // Update notifications every x seconds\r\n        await this.checkNotificationsHandler()\r\n        this.mySecondInterval = setInterval(this.checkNotificationsHandler, this.state.inform_notifications_every_sec)\r\n\r\n        // Get all sessions from backend\r\n        await axios.get(baseURL+\"/session/\",{ headers: authHeader() }).then((res) =>{\r\n            let data = res.data\r\n            this.setState({sessions: data.reverse()})\r\n\r\n            // check if a session is ongoing\r\n            if(this.state.sessions.length > 0){\r\n                if (this.state.sessions[this.state.sessions.length-1].session_stopped){\r\n                    this.setState({\r\n                        session_ongoing: 0,\r\n                    })\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        session_ongoing: 1,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.myInterval);\r\n        clearInterval(this.mySecondInterval);\r\n    }\r\n\r\n    // Input user for title of a session\r\n    handleChange(event) {\r\n        event.preventDefault()\r\n        this.setState({currentTitle: event.target.value});\r\n    }\r\n\r\n    // Creates Session and increments number of session and ongoing session will be true\r\n    createSessionHandler = async (e)=>{\r\n\r\n        //start interval for updating current measurements\r\n        this.myInterval = setInterval(this.getMeasurements,10000)//every 10 seconds\r\n\r\n        e.preventDefault()\r\n\r\n        let new_session = {\r\n            session_id: this.state.sessions.length,\r\n            session_name: this.state.currentTitle,\r\n            session_stopped: 0,\r\n            //session_breakTime: 0,\r\n        }\r\n\r\n        // Send creation of session to backend and get the session_start of the backend\r\n        console.log(\"This data will be sent to the backend: \", new_session)\r\n        await axios.post(baseURL+'/session/', new_session, { headers: authHeader() })\r\n             .then(resp => {\r\n                 console.log(\"create Session respond:\", resp)\r\n                 new_session[\"session_start\"] = resp[\"data\"][\"session_start\"]\r\n                 if (resp.status !== 200) {\r\n                     throw new Error(`Request failed: ${resp.status}`);\r\n                 }\r\n             })\r\n             .catch(err => {\r\n                 console.log(err.response);\r\n             })\r\n\r\n        // Add the created session to the list of sessions\r\n         let sessions = [new_session, ...this.state.sessions]\r\n\r\n        // Change session ongoing to true\r\n        await this.setState({\r\n            session_ongoing: 1,\r\n        })\r\n\r\n        await this.setState({ongoing_session_id: new_session.session_id})\r\n        await this.getMeasurements()\r\n        await this.setState({sessions})\r\n        console.log(\"State after created session: \",this.state)\r\n    }\r\n\r\n    // Stop the current session and get the session_end time from the backend and save it in the last session\r\n    stopSessionHandler = async (e)=>{\r\n        e.preventDefault()\r\n        let sessions\r\n\r\n        await axios.post(baseURL+'/session/stop/', {},{ headers: authHeader() })\r\n            .then(resp => {\r\n                 sessions = this.state.sessions.map(session => (\r\n                    session.session_id===this.state.sessions.length-1 ? {...session, session_end: resp[\"data\"][\"session_end\"], session_stopped: 1}: session\r\n\r\n            ))\r\n                console.log(\"sessions after stopped\", this.state)\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n\r\n        //get measurements\r\n        await this.getMeasurements()\r\n\r\n        //get session with id\r\n        let newSession = await this.getSessionById(sessions[0].session_id)\r\n        sessions[0]=newSession\r\n        await this.setState({\r\n            session_ongoing: 0,\r\n        })\r\n\r\n        // Set new sessions\r\n        await this.setState({ sessions });\r\n\r\n        clearInterval(this.myInterval); //stop interval for updating current measurements\r\n    }\r\n\r\n    //get the session with the id\r\n    getSessionById = async (id) => {\r\n        let session = \"\"\r\n        await axios.get(baseURL + /session/+id, {headers: authHeader()}).then((res) => {\r\n            let data = res.data\r\n            session = data\r\n        })\r\n\r\n        return session\r\n    }\r\n\r\n    getMeasurements = async () => {\r\n        //get CO2 for all sessions and store it, so it can be used for area chart\r\n        await axios.get(baseURL + \"/CO2/\",{ headers: authHeader() }).then((res) => {\r\n            let data = res.data\r\n            console.log(\"DATA CO2: \", data)\r\n\r\n            //dictionary will then be stored in allSessionsCO2. As format for area chart\r\n            let newDict = []\r\n\r\n            //iterate over whole data to get key (id of session) and value (list of all CO2 measurements)\r\n            Object.entries(data).length > 0 &&\r\n            Object.entries(data).map(([key, value]) => {\r\n                //array to store each dict of one session which is used for area chart: name and CO2\r\n                let array = []\r\n                //console.log(key, value)\r\n                Object.entries(value).map(([index, oneMeasure]) => {\r\n                    array.push(\r\n                        {\r\n                            name: \"\",\r\n                            CO2: oneMeasure,\r\n                        }\r\n                    )\r\n                })\r\n                //add each session to the new dictionary\r\n                newDict.push({\r\n                    id: key,\r\n                    measurements: array\r\n                })\r\n            })\r\n\r\n            //set state to the new dictionary\r\n            this.setState({allSessionsCO2: newDict})\r\n        })\r\n\r\n        //same as above but for temp: get temp for all sessions and store it, so it can be used for area chart\r\n        await axios.get(baseURL + \"/temp/\",{ headers: authHeader() }).then((res) => {\r\n            let data = res.data\r\n            console.log(\"DATA TEMP\", data)\r\n\r\n            //dictionary will then be stored in allSessionsTemp. As format for area chart\r\n            let newDict = []\r\n\r\n            //iterate over whole data to get key (nid of session) and value (list of all temp measurements)\r\n            Object.entries(data).length > 0 &&\r\n            Object.entries(data).map(([key, value]) => {\r\n                //array to store each dict of one session which is used for area chart: name and temp\r\n                let array = []\r\n                Object.entries(value).map(([index, oneMeasure]) => {\r\n                    array.push(\r\n                        {\r\n                            name: \"\",\r\n                            Temperature: oneMeasure,\r\n\r\n                        }\r\n                    )\r\n                })\r\n                //add each session to the new dictionary\r\n                newDict.push({\r\n                    id: key,\r\n                    measurements: array\r\n                })\r\n            })\r\n\r\n            //set state to the new dictionary\r\n            this.setState({allSessionsTemp: newDict})\r\n\r\n        })\r\n\r\n    }\r\n\r\n    // Deletes all sessions after clicking the delete button\r\n    deleteSessionHandler = async (e) => {\r\n        e.preventDefault()\r\n        let sessions = []\r\n        this.setState({sessions})\r\n        axios.delete(baseURL + '/session/',{ headers: authHeader() })\r\n            .then(resp => {\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n        await this.getMeasurements()\r\n\r\n    }\r\n\r\n    // Check all 30 seconds the state of notifications and informs the user with toast\r\n    checkNotificationsHandler = async () => {\r\n\r\n        // Get all notifications from backend\r\n        await axios.get(baseURL+\"/session/check/\",{ headers: authHeader() }).then((res) =>{\r\n            let data = res.data\r\n            // Overwrite the notification values from the backend\r\n            this.setState({list_of_notifications: data})\r\n        })\r\n\r\n        // Check notifications and alarm the user\r\n        if (this.state.list_of_notifications.make_break){\r\n            toast.warning('You need a break! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, make_break: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.open_window){\r\n            toast.warning('You need to open the window! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, open_window: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.air_quality_wrong){\r\n            toast.warning('You need to open the window since the air quality is bad! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, air_quality_wrong: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_humidity_wrong){\r\n            toast.warning('You need to open the window since the humidity is bad! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_humidity_wrong: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_temperature_cold){\r\n            toast.warning('It is colder than the limited set in settings! Turn on the heating! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_temperature_cold: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_temperature_hot){\r\n            toast.warning('It is colder than the limited set in settings! Turn off the heating or open the window! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_temperature_hot: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        // List of all sessions completed\r\n            let sessionsList = this.state.sessions.map(session => {\r\n                if (session.session_stopped) {\r\n\r\n                    //iterate to find temp measurements of the right id\r\n                    let sessionMeasTemp = null\r\n                    this.state.allSessionsTemp.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasTemp = entry.measurements\r\n                        }\r\n                    })\r\n\r\n                    //iterate to find co2 measurements of the right id\r\n                    let sessionMeasCO2 = null\r\n                    this.state.allSessionsCO2.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasCO2 = entry.measurements\r\n                            sessionMeasCO2 = entry.measurements\r\n                        }\r\n                    })\r\n\r\n                       return (\r\n                        <div key={session.session_id}>\r\n                            <div className={\"sessionElem\"}>\r\n                                <p><b>{session.session_name}</b> | <b>Session ID:</b> {session.session_id} </p> <p><b>Session\r\n                                    Start:</b> {session.session_start} | <b>Session End:</b> {session.session_end}</p>\r\n                                <p><b>Average Temperature: </b>{session.average_temp.toFixed(1)}° C | <b>Average CO<sub>2</sub>: </b>{session.average_co2.toFixed(1)} CO<sub>2</sub>e</p>\r\n                                {/*| <b>Session Duartion:</b> {session.session_end - session.session_start)}</p>*/}\r\n                                {sessionMeasTemp == null ? \"\" : <AreaRechartComponent type={\"Temperature\"}\r\n                                                                                data={sessionMeasTemp}></AreaRechartComponent>}\r\n                                {sessionMeasCO2 == null ? \"\" : <AreaRechartComponent type={\"CO2\"}\r\n                                                                                  data={sessionMeasCO2}></AreaRechartComponent>}\r\n\r\n                                {/* <AreaRechartComponent type={\"CO2\"}8148f3b4c0ed\r\n                                                  data={this.state.allSessionsCO2[session.session_id][session.session_name]}></AreaRechartComponent>*/}\r\n                            </div>\r\n                        </div>\r\n\r\n                    )\r\n                }\r\n            })\r\n            // List of current active session\r\n            let currentSession = this.state.sessions.map(session => {\r\n                if (!session.session_stopped){\r\n\r\n                    //iterate to find temp measurements of the right id\r\n                    let sessionMeasTemp = []\r\n                    this.state.allSessionsTemp.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasTemp = entry.measurements\r\n                        }\r\n                    })\r\n\r\n                    //iterate to find co2 measurements of the right id\r\n                    let sessionMeasCO2 = []\r\n                    this.state.allSessionsCO2.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasCO2 = entry.measurements\r\n                        }\r\n                    })\r\n\r\n                    //show ongoing session data\r\n                    return (\r\n                        <div key={session.session_id}>\r\n                            <p><b>{session.session_name}</b> | <b>Session ID:</b> {session.session_id} </p> <p><b>Session\r\n                                Start:</b> {session.session_start}</p>\r\n                            {this.state.sessions.length!=0&&sessionMeasTemp.length!=0?<p><b>Current Temperature:</b> {sessionMeasTemp[sessionMeasTemp.length-1].Temperature}° C</p>:<p><b>Current Temp:</b> Not measured yet</p>}\r\n                            {this.state.sessions.length!=0&&sessionMeasCO2.length!=0?<p><b>Current CO<sub>2</sub>:</b> {sessionMeasCO2[sessionMeasCO2.length-1].CO2} CO<sub>2</sub>e</p>:<p><b>Current CO<sub>2</sub>:</b> Not measured yet</p>}\r\n                        </div>\r\n\r\n                    )}\r\n            })\r\n\r\n            return (\r\n             <div>\r\n                 <ToastContainer autoClose={false} limit={1} position=\"top-center\"/>\r\n                    <div className={\"backgroundStudySession\"}>\r\n                        <div className={\"elem\"}>\r\n                            <h1>STUDY SESSION</h1>\r\n                            <h2>Current study sessions: </h2>\r\n                            {\r\n                                <form>\r\n                                    <label>\r\n                                        <b>Name: </b>\r\n                                        <input type=\"text\" placeholder={\"Enter an optional name\"}\r\n                                               onKeyPress={(e) => {\r\n                                                   e.key === 'Enter' && e.preventDefault();\r\n                                               }} value={this.state.currentTitle} onChange={this.handleChange}/>\r\n                                    </label>\r\n                                </form>\r\n                            }\r\n                            {this.state.session_ongoing !== 1 ?\r\n                                <button className={\"button\"} onClick={this.createSessionHandler}>Create New Session</button>\r\n                                : <button  className={\"button\"} onClick={this.stopSessionHandler}>Stop Session</button>}\r\n\r\n                            {currentSession}\r\n                            <p></p>\r\n\r\n                            {(this.state.sessions.length > 0) && (this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0) &&\r\n                            <h2>Past study sessions: </h2>}\r\n                            {(this.state.sessions.length > 0) && (!this.state.session_ongoing) && (this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0) &&\r\n                            <button  className={\"button\"}  onClick={this.deleteSessionHandler}>Delete all Sessions</button>}\r\n\r\n                            {sessionsList}\r\n                        </div>\r\n                    </div>\r\n                    <ScrollToTop></ScrollToTop>\r\n                </div>\r\n\r\n            )\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default StudySession;"]},"metadata":{},"sourceType":"module"}