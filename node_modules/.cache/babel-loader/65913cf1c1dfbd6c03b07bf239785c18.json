{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\ASE\\\\project thingy\\\\thingy-client-purple\\\\src\\\\components\\\\StudySession.js\";\nimport React, { Component } from \"react\";\nimport moment from 'moment';\nimport axios from \"axios\";\nimport './StudySession.css';\nimport AreaRechartComponent from \"./AreaRechartComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"http://localhost:8080\";\n\nclass StudySession extends Component {\n  constructor() {\n    super();\n\n    this.createSessionHandler = e => {\n      e.preventDefault();\n      const new_session = {\n        session_id: this.state.session_numbers,\n        session_name: \"\",\n        session_start: moment().format(\"DD-MM-YYYY hh:mm:ss A\"),\n        session_stopped: 0\n      };\n      let sessions = [new_session, ...this.state.sessions];\n      this.setState({\n        sessions\n      });\n      let new_session_numbers = this.state.session_numbers + 1;\n      this.setState({\n        session_numbers: new_session_numbers,\n        session_ongoing: 1\n      }); // Send creation of session to backend\n\n      let formData = new FormData();\n      formData.append('data', \"new_session\");\n      console.log(\"This data will be sent to the backend\");\n      console.log(formData);\n      console.log(JSON.stringify(formData));\n      let formdata2 = JSON.stringify(formData);\n      axios.post(baseURL + '/session/', formdata2, {}).then(resp => {\n        console.log(resp);\n\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      });\n    };\n\n    this.stopSessionHandler = async e => {\n      e.preventDefault();\n      let sessions = this.state.sessions.map(session => session.session_id === this.state.session_numbers - 1 ? { ...session,\n        session_end: moment().format(\"DD-MM-YYYY hh:mm:ss A\"),\n        session_stopped: 1\n      } : session);\n      await this.setState({\n        sessions\n      });\n      await this.setState({\n        session_ongoing: 0\n      });\n    };\n\n    this.deleteSessionHandler = e => {\n      e.preventDefault();\n      let sessions = [];\n      this.setState({\n        sessions\n      });\n    };\n\n    this.state = {\n      session_numbers: 0,\n      // number of sessions per user\n      session_ongoing: 0,\n      // Boolean: is there a current session ongoing?\n      sessions: [// {\n        //     session_id: integer, // Every session has an unique ID\n        //     session_name: string, // Name of the session\n        //     session_start: date // date and time the session started\n        //     session_end: date // date and time the session stopped\n        //     session_breakTime: date // date and time when the next break is\n        // }\n      ],\n      currentCO2: \"500\",\n      currentTemp: \"20\",\n      avgCO2: \"550\",\n      avgTemp: \"25\"\n    };\n  } //get current co2 and temp measurements\n\n\n  componentDidMount() {\n    axios.get(baseURL + \"/CO2/\").then(async res => {\n      let data = res.data.data;\n      console.log(\"CO2 data:\", data);\n      await this.setState({\n        currentCO2: data\n      });\n    });\n    axios.get(baseURL + \"/temp/\").then(res => {\n      let data = res.data.data;\n      console.log(\"Temperature data:\", data);\n      this.setState({\n        currentTemp: data\n      });\n    }); // Get all sessions from backend\n\n    axios.get(baseURL + \"/session/\").then(res => {\n      let data = res.data;\n      console.log(\"Session data:\", data);\n      this.setState({\n        sessions: data\n      });\n    });\n  } // Creates Session and increments number of session and ongoing session will be true\n\n\n  render() {\n    // List of all sessions completed\n    //if (this.state.sessions.length > 0)\n    let sessionsList = this.state.sessions.map(session => {\n      if (session.session_stopped) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sessionElem\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Session ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 24\n            }, this), \" \", session.session_id, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Session Start:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 66\n            }, this), \" \", session.session_start, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Session End:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 114\n            }, this), \" \", session.session_end]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(AreaRechartComponent, {\n            type: \"Temperature\",\n            data: [{\n              \"name\": \"18:10\",\n              \"Temperature\": 24.1\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AreaRechartComponent, {\n            type: \"CO2\",\n            data: [{\n              \"name\": \"18:10\",\n              \"CO2\": 500\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, session.session_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this);\n    });\n    let currentSession = this.state.sessions.map(session => {\n      if (!session.session_stopped) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Session ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 28\n          }, this), \" \", session.session_id, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Session Start:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 70\n          }, this), \" \", session.session_start]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this)\n      }, session.session_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backgroundMeasurements\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elem\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Current measurements\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"CO2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.currentCO2, \" CO2e\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.currentTemp, \"\\xB0 C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elem\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Average measurements\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Average CO2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.avgCO2, \" CO2e\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Average Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.avgTemp, \"\\xB0 C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backgroundStudySession\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elem\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"STUDY SESSION\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Current study sessions: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 25\n            }, this), this.state.session_ongoing !== 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.createSessionHandler,\n              children: \"Create New Session\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 61\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.stopSessionHandler,\n              children: \"Stop Session\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 31\n            }, this), currentSession, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 25\n            }, this), this.state.sessions.length > 0 && this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Past study sessions: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 137\n            }, this), this.state.sessions.length > 0 && this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.deleteSessionHandler,\n              children: \"Delete all Sessions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 137\n            }, this), sessionsList]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default StudySession;","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/ASE/project thingy/thingy-client-purple/src/components/StudySession.js"],"names":["React","Component","moment","axios","AreaRechartComponent","baseURL","StudySession","constructor","createSessionHandler","e","preventDefault","new_session","session_id","state","session_numbers","session_name","session_start","format","session_stopped","sessions","setState","new_session_numbers","session_ongoing","formData","FormData","append","console","log","JSON","stringify","formdata2","post","then","resp","status","Error","catch","err","response","stopSessionHandler","map","session","session_end","deleteSessionHandler","currentCO2","currentTemp","avgCO2","avgTemp","componentDidMount","get","res","data","render","sessionsList","currentSession","length"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nimport moment from 'moment';\r\nimport axios from \"axios\";\r\nimport './StudySession.css';\r\nimport AreaRechartComponent from \"./AreaRechartComponent\";\r\n\r\nconst baseURL = \"http://localhost:8080\"\r\n\r\n\r\nclass StudySession extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            session_numbers: 0, // number of sessions per user\r\n            session_ongoing: 0, // Boolean: is there a current session ongoing?\r\n\r\n            sessions: [\r\n                // {\r\n                //     session_id: integer, // Every session has an unique ID\r\n                //     session_name: string, // Name of the session\r\n                //     session_start: date // date and time the session started\r\n                //     session_end: date // date and time the session stopped\r\n                //     session_breakTime: date // date and time when the next break is\r\n                // }\r\n            ],\r\n\r\n            currentCO2: \"500\",\r\n            currentTemp: \"20\",\r\n            avgCO2:\"550\",\r\n            avgTemp:\"25\",\r\n        }\r\n    }\r\n\r\n    //get current co2 and temp measurements\r\n    componentDidMount() {\r\n        axios.get(baseURL+\"/CO2/\").then(async (res) => {\r\n            let data = res.data.data\r\n            console.log(\"CO2 data:\", data)\r\n            await this.setState({\r\n                currentCO2: data\r\n            })\r\n        })\r\n\r\n        axios.get(baseURL+\"/temp/\").then((res) =>{\r\n            let data = res.data.data\r\n            console.log(\"Temperature data:\",data)\r\n            this.setState({currentTemp: data})\r\n        })\r\n\r\n        // Get all sessions from backend\r\n        axios.get(baseURL+\"/session/\").then((res) =>{\r\n            let data = res.data\r\n            console.log(\"Session data:\",data)\r\n            this.setState({sessions: data})\r\n        })\r\n    }\r\n\r\n    // Creates Session and increments number of session and ongoing session will be true\r\n    createSessionHandler = (e)=>{\r\n        e.preventDefault()\r\n\r\n        const new_session = {\r\n            session_id: this.state.session_numbers,\r\n            session_name: \"\",\r\n            session_start: moment().format(\"DD-MM-YYYY hh:mm:ss A\"),\r\n            session_stopped: 0,\r\n        }\r\n        let sessions = [new_session, ...this.state.sessions]\r\n        this.setState({sessions})\r\n        let new_session_numbers = this.state.session_numbers + 1\r\n        this.setState({\r\n            session_numbers: new_session_numbers,\r\n            session_ongoing: 1,\r\n        })\r\n\r\n        // Send creation of session to backend\r\n        let formData = new FormData()\r\n        formData.append('data', \"new_session\")\r\n\r\n        console.log(\"This data will be sent to the backend\");\r\n        console.log(formData);\r\n        console.log(JSON.stringify(formData));\r\n        let formdata2 = JSON.stringify(formData);\r\n\r\n        axios.post(baseURL+'/session/', formdata2, {})\r\n             .then(resp => {\r\n                 console.log(resp)\r\n                 if (resp.status !== 200) {\r\n                     throw new Error(`Request failed: ${resp.status}`);\r\n                 }\r\n             })\r\n             .catch(err => {\r\n                 console.log(err.response);\r\n             })\r\n    }\r\n\r\n    stopSessionHandler = async (e)=>{\r\n        e.preventDefault()\r\n\r\n        let sessions = this.state.sessions.map(session => (\r\n            session.session_id===this.state.session_numbers-1 ? {...session, session_end: moment().format(\"DD-MM-YYYY hh:mm:ss A\"), session_stopped: 1}: session\r\n        ))\r\n        await this.setState({ sessions });\r\n\r\n        await this.setState({\r\n            session_ongoing: 0,\r\n        })\r\n    }\r\n\r\n\r\n    // Deletes all sessions after clicking the delete button\r\n    deleteSessionHandler = (e)=>{\r\n        e.preventDefault()\r\n        let sessions = []\r\n        this.setState({sessions})\r\n    }\r\n\r\n    render() {\r\n        // List of all sessions completed\r\n        //if (this.state.sessions.length > 0)\r\n        let sessionsList = this.state.sessions.map(session=> {\r\n            if(session.session_stopped)\r\n            return(\r\n                <div key={session.session_id}>\r\n                    <div className={\"sessionElem\"}>\r\n                    <p><b>Session ID:</b> {session.session_id} | <b>Session Start:</b> {session.session_start} | <b>Session End:</b> {session.session_end}</p>\r\n                    {/*| <b>Session Duartion:</b> {session.session_end - session.session_start)}</p>*/}\r\n                        <AreaRechartComponent type={\"Temperature\"} data={[\r\n                            {\r\n                                \"name\": \"18:10\",\r\n                                \"Temperature\": 24.1,\r\n                            }]}></AreaRechartComponent>\r\n                        <AreaRechartComponent type={\"CO2\"} data={[\r\n                            {\r\n                                \"name\": \"18:10\",\r\n                                \"CO2\": 500,\r\n                            }]}></AreaRechartComponent>\r\n\r\n                    </div>\r\n\r\n        </div>\r\n\r\n            )\r\n        })\r\n\r\n        let currentSession = this.state.sessions.map(session=> {\r\n            if(!session.session_stopped)\r\n                return(\r\n                    <div key={session.session_id}>\r\n                        <p><b>Session ID:</b> {session.session_id} | <b>Session Start:</b> {session.session_start}</p>\r\n                    </div>\r\n\r\n                )\r\n        })\r\n\r\n            return(\r\n                <div className={\"back\"}>\r\n            <div className={\"background\"}>\r\n\r\n                    <div className={\"backgroundMeasurements\"}>\r\n                        <div className={\"elem\"}>\r\n                            <h1>Current measurements</h1>\r\n                            <h2>CO2</h2>\r\n                            <p>{this.state.currentCO2} CO2e</p>\r\n                            <h2>Temperature</h2>\r\n                            <p>{this.state.currentTemp}° C</p>\r\n                        </div>\r\n                        <div className={\"elem\"}>\r\n                            <h1>Average measurements</h1>\r\n                            <h2>Average CO2</h2>\r\n                            <p>{this.state.avgCO2} CO2e</p>\r\n                            <h2>Average Temperature</h2>\r\n                            <p>{this.state.avgTemp}° C</p>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className={\"backgroundStudySession\"}>\r\n                        <div className={\"elem\"}>\r\n                        <h1>STUDY SESSION</h1>\r\n                        <h2>Current study sessions: </h2>\r\n                        {this.state.session_ongoing !== 1 ? <button onClick={this.createSessionHandler}>Create New Session</button>\r\n                            : <button onClick={this.stopSessionHandler}>Stop Session</button>}{currentSession}\r\n                        <p></p>\r\n\r\n                        {(this.state.sessions.length > 0) && (this.state.sessions[this.state.sessions.length-1].session_stopped!==0) && <h2>Past study sessions: </h2>}\r\n                        {(this.state.sessions.length > 0) && (this.state.sessions[this.state.sessions.length-1].session_stopped!==0) && <button onClick={this.deleteSessionHandler}>Delete all Sessions</button>}\r\n\r\n                        {sessionsList}\r\n                    </div>\r\n                        </div>\r\n\r\n            </div>\r\n                    </div>\r\n\r\n    )\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default StudySession;"]},"metadata":{},"sourceType":"module"}