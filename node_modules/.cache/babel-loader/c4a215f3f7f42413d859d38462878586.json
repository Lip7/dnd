{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\ASE\\\\project thingy\\\\thingy-client-purple\\\\src\\\\components\\\\Settings.js\";\nimport React, { Component } from \"react\";\nimport RangeSlider from \"./RangeSlider\";\nimport axios from \"axios\"; // Notify user about saved settings\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport authHeader from \"./services/authheader\"; // CONSTANTS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"http://localhost:8080\"; // In this class, the user can change the settings for breaktime, max and min temperature.\n\nclass Settings extends Component {\n  constructor() {\n    super();\n\n    this.handleChangeTemp = newValue => {\n      this.setState({\n        minTemp: newValue[0],\n        maxTemp: newValue[1]\n      });\n      console.log(this.state);\n    };\n\n    this.onInputchange = event => {\n      event.preventDefault();\n      console.log(\"event:\", event.target.name);\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      console.log(\"on input change:\", this.state);\n    };\n\n    this.sendUpdatedSettings = async e => {\n      e.preventDefault();\n      let updated_settings = {\n        minTemp: this.state.minTemp,\n        maxTemp: this.state.maxTemp,\n        breakTime: this.state.breakTime\n      };\n      console.log(\"This data will be sent to the backend: \", updated_settings); // Send the new saved settings to the backend\n\n      await axios.post(baseURL + '/session/values/', updated_settings, {\n        headers: authHeader()\n      }).then(resp => {\n        console.log(\"create Session respond:\", resp);\n\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      });\n      toast.success('You have saved your settings successfully!');\n    };\n\n    this.state = {\n      minTemp: 20,\n      maxTemp: 37,\n      breakTime: 7\n    };\n  }\n\n  async componentWillMount() {\n    // Get all the settings saved for the user i.e. break time, max and min temperature, store it in state and display it in the settings\n    await axios.get(baseURL + \"/session/values/\", {\n      headers: authHeader()\n    }).then(res => {\n      let data = res.data;\n      console.log(\"Settings data from backend:\", data);\n      this.setState(data);\n    });\n  } // This function will be sent to the child class RangeSlider to get the new changed minmax temperatures which will be saved in the state\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backgroundStudySession\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"elem\",\n        children: [\"                \", /*#__PURE__*/_jsxDEV(ToastContainer, {\n          autoClose: false,\n          limit: 1,\n          position: \"top-center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 57\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Minimum and Maximum Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select the desired interval for your temperature in your room and get alarmed when it gets lower or higher:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Current minimum and maximum temperature: \", this.state.minTemp, \" Celsius | \", this.state.maxTemp, \" Celsius\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              margin: 20\n            },\n            children: /*#__PURE__*/_jsxDEV(RangeSlider, {\n              handleChangeTemp: this.handleChangeTemp,\n              maxTemp: this.state.maxTemp,\n              minTemp: this.state.minTemp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Break After X Minutes:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"After how many minutes should you be reminded to take a break\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: 0,\n            max: 1440,\n            placeholder: this.state.breakTime //\"in minutes\"\n            ,\n            name: \"breakTime\",\n            onChange: this.onInputchange,\n            value: this.state.breakTime,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: 40\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: this.sendUpdatedSettings,\n            children: \"Save Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Settings;","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/ASE/project thingy/thingy-client-purple/src/components/Settings.js"],"names":["React","Component","RangeSlider","axios","ToastContainer","toast","authHeader","baseURL","Settings","constructor","handleChangeTemp","newValue","setState","minTemp","maxTemp","console","log","state","onInputchange","event","preventDefault","target","name","value","sendUpdatedSettings","e","updated_settings","breakTime","post","headers","then","resp","status","Error","catch","err","response","success","componentWillMount","get","res","data","render","display","justifyContent","alignItems","margin"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport RangeSlider from \"./RangeSlider\";\r\nimport axios from \"axios\";\r\n\r\n// Notify user about saved settings\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport authHeader from \"./services/authheader\";\r\n\r\n// CONSTANTS\r\nconst baseURL = \"http://localhost:8080\"\r\n\r\n\r\n// In this class, the user can change the settings for breaktime, max and min temperature.\r\nclass Settings extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            minTemp: 20,\r\n            maxTemp: 37,\r\n            breakTime: 7,\r\n        }\r\n    }\r\n\r\n    async componentWillMount() {\r\n        // Get all the settings saved for the user i.e. break time, max and min temperature, store it in state and display it in the settings\r\n        await axios.get(baseURL+\"/session/values/\",{headers: authHeader()}).then((res) =>{\r\n            let data = res.data\r\n            console.log(\"Settings data from backend:\",data)\r\n            this.setState(data)\r\n        })\r\n    }\r\n\r\n    // This function will be sent to the child class RangeSlider to get the new changed minmax temperatures which will be saved in the state\r\n    handleChangeTemp = (newValue) => {\r\n        this.setState({\r\n            minTemp: newValue[0],\r\n            maxTemp: newValue[1],\r\n        })\r\n        console.log(this.state)\r\n    };\r\n\r\n    // Gets the input of the user for the minutes of the next break\r\n    onInputchange = event => {\r\n        event.preventDefault()\r\n        console.log(\"event:\",event.target.name)\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n        console.log(\"on input change:\",this.state)\r\n    }\r\n\r\n    // Send the updated settings to the backend\r\n    sendUpdatedSettings = async (e)=>{\r\n        e.preventDefault()\r\n\r\n        let updated_settings = {\r\n            minTemp: this.state.minTemp,\r\n            maxTemp: this.state.maxTemp,\r\n            breakTime: this.state.breakTime,\r\n        }\r\n\r\n        console.log(\"This data will be sent to the backend: \", updated_settings)\r\n\r\n        // Send the new saved settings to the backend\r\n        await axios.post(baseURL+'/session/values/', updated_settings, { headers: authHeader() })\r\n            .then(resp => {\r\n                console.log(\"create Session respond:\", resp)\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n        toast.success('You have saved your settings successfully!');\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className={\"backgroundStudySession\"}>\r\n                <div className={\"elem\"}>                <ToastContainer autoClose={false} limit={1} position=\"top-center\"/>\r\n                <h1>Settings</h1>\r\n                <h2>Minimum and Maximum Temperature:</h2>\r\n                <div >\r\n                    <p>Select the desired interval for your temperature in your room and get alarmed when it gets lower or higher:</p>\r\n                    <p>Current minimum and maximum temperature: {this.state.minTemp} Celsius | {this.state.maxTemp} Celsius</p>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        margin: 20 }}>\r\n                        <RangeSlider\r\n                            handleChangeTemp = {this.handleChangeTemp}\r\n                            maxTemp = {this.state.maxTemp}\r\n                            minTemp = {this.state.minTemp}\r\n                        >\r\n                        </RangeSlider>\r\n                    </div>\r\n                    <h2>Break After X Minutes:</h2>\r\n                    <p>After how many minutes should you be reminded to take a break</p>\r\n                    <input\r\n                        type=\"number\"\r\n                        min={0}\r\n                        max={1440}\r\n                        placeholder= {this.state.breakTime}//\"in minutes\"\r\n                        name=\"breakTime\"\r\n                        onChange={this.onInputchange}\r\n                        value={this.state.breakTime}\r\n                        required\r\n                    />\r\n                </div>\r\n               <div style={{\r\n                   margin: 40 }}>\r\n                   <button className={\"button\"} onClick={this.sendUpdatedSettings}>Save Settings</button>\r\n               </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings;"]},"metadata":{},"sourceType":"module"}