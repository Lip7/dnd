{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\SecondSemester\\\\MMI\\\\thingy-client-purple\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItems = (count, offset = 0) => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k + offset}`,\n  content: `item ${k + offset}`\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\r\n * Moves an item from one list to another list.\r\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n    };\n    this.id2List = {\n      droppable: 'items',\n      droppable2: 'selected'\n    };\n\n    this.getList = id => this.state[this.id2List[id]];\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination\n      } = result; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n        let state = {\n          items\n        };\n\n        if (source.droppableId === 'droppable2') {\n          state = {\n            selected: items\n          };\n        }\n\n        this.setState(state);\n      } else {\n        const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination);\n        this.setState({\n          items: result.droppable,\n          selected: result.droppable2\n        });\n      }\n    };\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [this.state.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 41\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable2\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [this.state.selected.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 41\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Put the things into the DOM!\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 181,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/SecondSemester/MMI/thingy-client-purple/src/App.js"],"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","App","state","items","selected","id2List","droppable","droppable2","getList","onDragEnd","setState","render","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: 250\r\n});\r\n\r\nclass App extends Component {\r\n    state = {\r\n        items: getItems(10),\r\n        selected: getItems(5, 10)\r\n    };\r\n\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n\r\n    getList = id => this.state[this.id2List[id]];\r\n\r\n    onDragEnd = result => {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            this.setState(state);\r\n        } else {\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            this.setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n        }\r\n    };\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n    render() {\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.state.items.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.state.selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        );\r\n    }\r\n}\r\n\r\n// Put the things into the DOM!\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"]},"metadata":{},"sourceType":"module"}