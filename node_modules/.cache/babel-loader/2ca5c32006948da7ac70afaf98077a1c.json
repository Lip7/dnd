{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\ASE\\\\project thingy\\\\thingy-client-purple\\\\src\\\\components\\\\StudySession.js\";\nimport React, { Component } from \"react\";\nimport moment from 'moment';\nimport axios from \"axios\";\nimport './StudySession.css';\nimport AreaRechartComponent from \"./AreaRechartComponent\";\nimport ScrollToTop from \"./ScrollToTop\"; // Notify user with short messages\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"http://localhost:8080\";\n\nclass StudySession extends Component {\n  constructor() {\n    super();\n\n    this.getData = async () => {\n      try {\n        //Get current co2 measurement\n        await axios.get(baseURL + \"/CO2/\").then(async res => {\n          let data = res.data.data;\n          console.log(\"CO2 data:\", data);\n          this.setState({\n            currentCO2: data\n          });\n        }); //Get current temp measurement\n\n        await axios.get(baseURL + \"/temp/\").then(res => {\n          let data = res.data.data;\n          console.log(\"Temperature data:\", data);\n          this.setState({\n            currentTemp: data\n          });\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.createSessionHandler = async e => {\n      e.preventDefault();\n      let new_session = {\n        session_id: this.state.sessions.length,\n        session_name: this.state.currentTitle,\n        session_stopped: 0,\n        session_breakTime: 0\n      }; // Send creation of session to backend and get the session_start of the backend\n\n      console.log(\"This data will be sent to the backend: \", new_session);\n      await axios.post(baseURL + '/session/', new_session, {}).then(resp => {\n        console.log(\"create Session respond:\", resp);\n        new_session[\"session_start\"] = resp[\"data\"][\"session_start\"];\n\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      }); // Add the created session to the list of sessions\n\n      let sessions = [new_session, ...this.state.sessions];\n      await this.setState({\n        sessions\n      });\n      this.setState({\n        session_ongoing: 1\n      });\n      console.log(\"State after created session: \", this.state);\n    };\n\n    this.stopSessionHandler = async e => {\n      e.preventDefault();\n      let sessions;\n      await axios.post(baseURL + '/session/stop/', {}).then(resp => {\n        sessions = this.state.sessions.map(session => session.session_id === this.state.sessions.length - 1 ? { ...session,\n          session_end: resp[\"data\"][\"session_end\"],\n          session_stopped: 1\n        } : session);\n        console.log(\"sessions after stopped\", this.state);\n\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      });\n      await this.setState({\n        sessions\n      });\n      await this.setState({\n        session_ongoing: 0\n      });\n    };\n\n    this.deleteSessionHandler = e => {\n      e.preventDefault();\n      let sessions = [];\n      this.setState({\n        sessions\n      });\n      axios.delete(baseURL + '/session/', {}).then(resp => {\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      });\n    };\n\n    this.checkNotificationsHandler = () => {\n      if (this.state.list_of_notifications.make_break) {\n        toast.warning('You need a break! ');\n      }\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      session_ongoing: 0,\n      // Boolean: is there a current session ongoing? then do not show delete button\n      currentTitle: \"\",\n      // currentTitle to be set by the user -> will be pushed to the backend as session_name when creating a new session\n      sessions: [// {\n        //     session_id: integer, // Every session has an unique ID\n        //     session_name: string, // Name of the session\n        //     session_start: date // date and time the session started\n        //     session_end: date // date and time the session stopped\n        //     session_breakTime: date // date and time when the next break is\n        //     session_duration: date // date and time between start and end\n        //     session_stopped: 0 // true if the session was stopped, false if it is still ongoing\n        // }\n      ],\n      list_of_notifications: {\n        open_window: false,\n        make_break: true,\n        alarm_humidity_wrong: false,\n        air_quality_wrong: false,\n        alarm_temperature_cold: false,\n        alarm_temperature_hot: false\n      },\n      currentCO2: \"\",\n      currentTemp: \"\",\n      avgCO2: \"example\",\n      avgTemp: \"example\",\n      allSessionsTemp: \"\",\n      //list of all temp measurements (all sessions)\n      allSessionsCO2: \"\" //list of all co2 measurements (all sessions)\n\n    };\n  }\n\n  async componentDidMount() {\n    //update current temp and co2 every x seconds\n    this.getData();\n    this.myInterval = setInterval(this.getData, 10000); //every 10 seconds\n\n    this.checkNotificationsHandler();\n    this.mySecondInterval = setInterval(this.checkNotificationsHandler, 30000); // every 30 seconds\n    //TODO: timestamp always same. Should use time when measurement was done.\n    //Get co2 measurements of a session\n\n    await axios.get(baseURL + \"/session/CO2/\").then(res => {\n      let data = res.data;\n      console.log(\"CO2 data session:\", data);\n      let datalist = data.map(session => {\n        return {\n          \"name\": new Intl.DateTimeFormat('de-CH', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }).format(session.ts),\n          \"CO2\": session.data\n        };\n      });\n      console.log(\"DList of all CO2 (all sessions): \", datalist);\n      this.setState({\n        allSessionsCO2: datalist\n      });\n    }); //TODO: timestamp always same. Should use time when measurement was done.\n    //Get temp measurements of a session\n\n    await axios.get(baseURL + \"/session/temp/\").then(res => {\n      let data = res.data;\n      console.log(\"Temp data session:\", data);\n      let datalist = data.map(session => {\n        return {\n          \"name\": new Intl.DateTimeFormat('de-CH', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }).format(session.ts),\n          \"Temperature\": session.data\n        };\n      });\n      console.log(\"List of all temp (all sessions): \", datalist);\n      this.setState({\n        allSessionsTemp: datalist\n      });\n    }); // Get all sessions from backend\n\n    await axios.get(baseURL + \"/session/\").then(res => {\n      let data = res.data;\n      console.log(\"Session data from backend get all sessions:\", data);\n      this.setState({\n        sessions: data\n      }); // check if a session is ongoing\n\n      if (this.state.sessions.length > 0) {\n        if (this.state.sessions[this.state.sessions.length - 1].session_stopped) {\n          this.setState({\n            session_ongoing: 0\n          });\n        } else {\n          this.setState({\n            session_ongoing: 1\n          });\n        }\n      }\n    });\n    console.log(\"State after get all sessions: \", this.state.sessions);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n    clearInterval(this.mySecondInterval);\n  } // Input user for title\n\n\n  handleChange(event) {\n    this.setState({\n      currentTitle: event.target.value\n    });\n  } //get current temp and co2\n\n\n  render() {\n    // List of all sessions completed\n    let sessionsList = this.state.sessions.map(session => {\n      if (session.session_stopped) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sessionElem\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: session.session_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 24\n            }, this), \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Session ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 56\n            }, this), \" \", session.session_id, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Session Start:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 98\n            }, this), \" \", session.session_start, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Session End:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 146\n            }, this), \" \", session.session_end]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(AreaRechartComponent, {\n            type: \"Temperature\",\n            data: this.state.allSessionsTemp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AreaRechartComponent, {\n            type: \"CO2\",\n            data: this.state.allSessionsCO2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this)\n      }, session.session_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this);\n    }); // List of current active session\n\n    let currentSession = this.state.sessions.map(session => {\n      if (!session.session_stopped) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: session.session_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 28\n          }, this), \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Session ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 60\n          }, this), \" \", session.session_id, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Session Start:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 102\n          }, this), \" \", session.session_start]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 25\n        }, this)\n      }, session.session_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backgroundMeasurements\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elem\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Current measurements\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.currentTemp, \"\\xB0 C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"CO2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.currentCO2, \" CO2e\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elem\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Average measurements\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Average Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.avgTemp, \"\\xB0 C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Average CO2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.avgCO2, \" CO2e\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n          position: \"top-center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backgroundStudySession\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elem\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"STUDY SESSION\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Current study sessions: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 29\n            }, this), this.state.session_ongoing === 1 && /*#__PURE__*/_jsxDEV(\"form\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: this.state.currentTitle,\n                  onChange: this.handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 33\n            }, this), this.state.session_ongoing !== 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.createSessionHandler,\n              children: \"Create New Session\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 65\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.stopSessionHandler,\n              children: \"Stop Session\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 35\n            }, this), currentSession, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 29\n            }, this), this.state.sessions.length > 0 && this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Past study sessions: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 141\n            }, this), this.state.sessions.length > 0 && !this.state.session_ongoing && this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.deleteSessionHandler,\n              children: \"Delete all Sessions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 174\n            }, this), sessionsList]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default StudySession;","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/ASE/project thingy/thingy-client-purple/src/components/StudySession.js"],"names":["React","Component","moment","axios","AreaRechartComponent","ScrollToTop","ToastContainer","toast","baseURL","StudySession","constructor","getData","get","then","res","data","console","log","setState","currentCO2","currentTemp","e","createSessionHandler","preventDefault","new_session","session_id","state","sessions","length","session_name","currentTitle","session_stopped","session_breakTime","post","resp","status","Error","catch","err","response","session_ongoing","stopSessionHandler","map","session","session_end","deleteSessionHandler","delete","checkNotificationsHandler","list_of_notifications","make_break","warning","handleChange","bind","open_window","alarm_humidity_wrong","air_quality_wrong","alarm_temperature_cold","alarm_temperature_hot","avgCO2","avgTemp","allSessionsTemp","allSessionsCO2","componentDidMount","myInterval","setInterval","mySecondInterval","datalist","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","ts","componentWillUnmount","clearInterval","event","target","value","render","sessionsList","session_start","currentSession"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nimport moment from 'moment';\r\nimport axios from \"axios\";\r\nimport './StudySession.css';\r\nimport AreaRechartComponent from \"./AreaRechartComponent\";\r\nimport ScrollToTop from \"./ScrollToTop\";\r\n\r\n// Notify user with short messages\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst baseURL = \"http://localhost:8080\"\r\n\r\n\r\n\r\n\r\nclass StudySession extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            session_ongoing: 0, // Boolean: is there a current session ongoing? then do not show delete button\r\n            currentTitle: \"\", // currentTitle to be set by the user -> will be pushed to the backend as session_name when creating a new session\r\n            sessions: [\r\n                // {\r\n                //     session_id: integer, // Every session has an unique ID\r\n                //     session_name: string, // Name of the session\r\n                //     session_start: date // date and time the session started\r\n                //     session_end: date // date and time the session stopped\r\n                //     session_breakTime: date // date and time when the next break is\r\n                //     session_duration: date // date and time between start and end\r\n                //     session_stopped: 0 // true if the session was stopped, false if it is still ongoing\r\n                // }\r\n            ],\r\n\r\n            list_of_notifications:\r\n                {\r\n                    open_window: false,\r\n                    make_break: true,\r\n                    alarm_humidity_wrong: false,\r\n                    air_quality_wrong: false,\r\n                    alarm_temperature_cold: false,\r\n                    alarm_temperature_hot: false,\r\n                },\r\n\r\n            currentCO2: \"\",\r\n            currentTemp: \"\",\r\n            avgCO2:\"example\",\r\n            avgTemp:\"example\",\r\n\r\n            allSessionsTemp:\"\", //list of all temp measurements (all sessions)\r\n            allSessionsCO2: \"\", //list of all co2 measurements (all sessions)\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        //update current temp and co2 every x seconds\r\n        this.getData()\r\n        this.myInterval = setInterval(this.getData,10000) //every 10 seconds\r\n\r\n        this.checkNotificationsHandler()\r\n        this.mySecondInterval = setInterval(this.checkNotificationsHandler, 30000) // every 30 seconds\r\n\r\n        //TODO: timestamp always same. Should use time when measurement was done.\r\n        //Get co2 measurements of a session\r\n        await axios.get(baseURL + \"/session/CO2/\").then((res) => {\r\n            let data = res.data\r\n            console.log(\"CO2 data session:\", data)\r\n            let datalist=data.map(session=> {\r\n                return{\r\n                    \"name\": new Intl.DateTimeFormat('de-CH', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(session.ts),\r\n                    \"CO2\": session.data,\r\n                }\r\n            })\r\n            console.log(\"DList of all CO2 (all sessions): \",datalist)\r\n            this.setState({allSessionsCO2: datalist})\r\n        })\r\n\r\n        //TODO: timestamp always same. Should use time when measurement was done.\r\n        //Get temp measurements of a session\r\n        await axios.get(baseURL + \"/session/temp/\").then((res) => {\r\n            let data = res.data\r\n            console.log(\"Temp data session:\", data)\r\n            let datalist=data.map(session=> {\r\n                return{\r\n                    \"name\": new Intl.DateTimeFormat('de-CH', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(session.ts),\r\n                    \"Temperature\": session.data,\r\n                }\r\n            })\r\n            console.log(\"List of all temp (all sessions): \",datalist)\r\n            this.setState({allSessionsTemp: datalist})\r\n        })\r\n\r\n        // Get all sessions from backend\r\n        await axios.get(baseURL+\"/session/\").then((res) =>{\r\n            let data = res.data\r\n            console.log(\"Session data from backend get all sessions:\",data)\r\n            this.setState({sessions: data})\r\n\r\n            // check if a session is ongoing\r\n            if(this.state.sessions.length > 0){\r\n                if (this.state.sessions[this.state.sessions.length-1].session_stopped){\r\n                    this.setState({\r\n                        session_ongoing: 0,\r\n                    })\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        session_ongoing: 1,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        console.log(\"State after get all sessions: \", this.state.sessions)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.myInterval);\r\n        clearInterval(this.mySecondInterval);\r\n    }\r\n\r\n    // Input user for title\r\n    handleChange(event) {\r\n        this.setState({currentTitle: event.target.value});\r\n    }\r\n\r\n    //get current temp and co2\r\n    getData=async () => {\r\n        try {\r\n            //Get current co2 measurement\r\n            await axios.get(baseURL + \"/CO2/\").then(async (res) => {\r\n                let data = res.data.data\r\n                console.log(\"CO2 data:\", data)\r\n                this.setState({\r\n                    currentCO2: data\r\n                })\r\n            })\r\n\r\n            //Get current temp measurement\r\n            await axios.get(baseURL + \"/temp/\").then((res) => {\r\n                let data = res.data.data\r\n                console.log(\"Temperature data:\", data)\r\n                this.setState({currentTemp: data})\r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n\r\n    // Creates Session and increments number of session and ongoing session will be true\r\n    createSessionHandler = async (e)=>{\r\n        e.preventDefault()\r\n\r\n        let new_session = {\r\n            session_id: this.state.sessions.length,\r\n            session_name: this.state.currentTitle,\r\n            session_stopped: 0,\r\n            session_breakTime: 0,\r\n        }\r\n\r\n        // Send creation of session to backend and get the session_start of the backend\r\n        console.log(\"This data will be sent to the backend: \", new_session)\r\n\r\n        await axios.post(baseURL+'/session/', new_session, {})\r\n             .then(resp => {\r\n                 console.log(\"create Session respond:\", resp)\r\n                 new_session[\"session_start\"] = resp[\"data\"][\"session_start\"]\r\n                 if (resp.status !== 200) {\r\n                     throw new Error(`Request failed: ${resp.status}`);\r\n                 }\r\n             })\r\n             .catch(err => {\r\n                 console.log(err.response);\r\n             })\r\n\r\n        // Add the created session to the list of sessions\r\n         let sessions = [new_session, ...this.state.sessions]\r\n        await this.setState({sessions})\r\n        this.setState({\r\n            session_ongoing: 1,\r\n        })\r\n        console.log(\"State after created session: \",this.state)\r\n    }\r\n\r\n    // Stop the current session and get the session_end time from the backend and save it in the last session\r\n    stopSessionHandler = async (e)=>{\r\n        e.preventDefault()\r\n        let sessions\r\n        await axios.post(baseURL+'/session/stop/', {})\r\n            .then(resp => {\r\n                 sessions = this.state.sessions.map(session => (\r\n                    session.session_id===this.state.sessions.length-1 ? {...session, session_end: resp[\"data\"][\"session_end\"], session_stopped: 1}: session\r\n                ))\r\n                console.log(\"sessions after stopped\", this.state)\r\n\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n\r\n        await this.setState({ sessions });\r\n\r\n        await this.setState({\r\n            session_ongoing: 0,\r\n        })\r\n    }\r\n\r\n\r\n    // Deletes all sessions after clicking the delete button\r\n    deleteSessionHandler = (e)=>{\r\n        e.preventDefault()\r\n        let sessions = []\r\n        this.setState({sessions})\r\n        axios.delete(baseURL+'/session/', {})\r\n            .then(resp => {\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n    }\r\n\r\n    // Check all 30 seconds the state of notifications and informs the user with toastify\r\n    checkNotificationsHandler =  () => {\r\n        if (this.state.list_of_notifications.make_break){\r\n            toast.warning('You need a break! ');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        // List of all sessions completed\r\n        let sessionsList = this.state.sessions.map(session=> {\r\n            if(session.session_stopped)\r\n            return(\r\n                <div key={session.session_id}>\r\n                    <div className={\"sessionElem\"}>\r\n                    <p><b>{session.session_name}</b> | <b>Session ID:</b> {session.session_id} | <b>Session Start:</b> {session.session_start} | <b>Session End:</b> {session.session_end}</p>\r\n                    {/*| <b>Session Duartion:</b> {session.session_end - session.session_start)}</p>*/}\r\n                        <AreaRechartComponent type={\"Temperature\"} data={this.state.allSessionsTemp}></AreaRechartComponent>\r\n                        <AreaRechartComponent type={\"CO2\"} data={this.state.allSessionsCO2}></AreaRechartComponent>\r\n                    </div>\r\n        </div>\r\n\r\n            )\r\n        })\r\n        // List of current active session\r\n        let currentSession = this.state.sessions.map(session=> {\r\n            if(!session.session_stopped)\r\n                return(\r\n                    <div key={session.session_id}>\r\n                        <p><b>{session.session_name}</b> | <b>Session ID:</b> {session.session_id} | <b>Session Start:</b> {session.session_start}</p>\r\n                    </div>\r\n\r\n                )\r\n        })\r\n\r\n            return(\r\n                <div className={\"back\"}>\r\n                    <div className={\"background\"}>\r\n\r\n                        <div className={\"backgroundMeasurements\"}>\r\n                            <div className={\"elem\"}>\r\n                                <h1>Current measurements</h1>\r\n                                <h2>Temperature</h2>\r\n                                <p>{this.state.currentTemp}° C</p>\r\n                                <h2>CO2</h2>\r\n                                <p>{this.state.currentCO2} CO2e</p>\r\n                            </div>\r\n                            <div className={\"elem\"}>\r\n                                <h1>Average measurements</h1>\r\n                                <h2>Average Temperature</h2>\r\n                                <p>{this.state.avgTemp}° C</p>\r\n                                <h2>Average CO2</h2>\r\n                                <p>{this.state.avgCO2} CO2e</p>\r\n                            </div>\r\n                        </div>\r\n                        <ToastContainer position=\"top-center\"/>\r\n\r\n                        <div className={\"backgroundStudySession\"}>\r\n                            <div className={\"elem\"}>\r\n                            <h1>STUDY SESSION</h1>\r\n                            <h2>Current study sessions: </h2>\r\n                                {(this.state.session_ongoing === 1) &&\r\n                                <form >\r\n                                    <label>\r\n                                        Name:\r\n                                        <input type=\"text\" value={this.state.currentTitle} onChange={this.handleChange} />\r\n                                    </label>\r\n                                </form>\r\n                                }\r\n                            {this.state.session_ongoing !== 1 ? <button onClick={this.createSessionHandler}>Create New Session</button>\r\n                                : <button onClick={this.stopSessionHandler}>Stop Session</button>}\r\n\r\n                                {currentSession}\r\n                            <p></p>\r\n\r\n                            {(this.state.sessions.length > 0) && (this.state.sessions[this.state.sessions.length-1].session_stopped!==0) && <h2>Past study sessions: </h2>}\r\n                            {(this.state.sessions.length > 0) && (!this.state.session_ongoing) && (this.state.sessions[this.state.sessions.length-1].session_stopped!==0) && <button onClick={this.deleteSessionHandler}>Delete all Sessions</button>}\r\n\r\n                            {sessionsList}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <ScrollToTop></ScrollToTop>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n    )\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default StudySession;"]},"metadata":{},"sourceType":"module"}