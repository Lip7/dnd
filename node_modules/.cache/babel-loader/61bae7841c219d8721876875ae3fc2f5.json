{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\ASE\\\\project thingy\\\\thingy-client-purple\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from \"react\";\nimport Box from '@mui/material/Box';\nimport Slider from '@mui/material/Slider';\nimport RangeSlider from \"./RangeSlider\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"http://localhost:8080\";\n\nclass Home extends Component {\n  constructor() {\n    super();\n\n    this.handleChangeTemp = newValue => {\n      this.setState({\n        minTemp: newValue[0],\n        maxTemp: newValue[1]\n      });\n      console.log(this.state);\n    };\n\n    this.onInputchange = event => {\n      event.preventDefault();\n      console.log(\"event:\", event.target.name);\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      console.log(\"on input change:\", this.state);\n    };\n\n    this.sendUpdatedSettings = async e => {\n      e.preventDefault();\n      let updated_settings = {\n        minTemp: this.state.minTemp,\n        maxTemp: this.state.maxTemp,\n        set_break_every: this.state.set_break_every\n      }; // Send creation of session to backend and get the session_start of the backend\n\n      console.log(\"This data will be sent to the backend: \", updated_settings); // TODO: ASK ALEX TO CREATE A NEW POST for saving the updated settings\n      // await axios.post(baseURL+'/session/', updated_settings, {})\n      //     .then(resp => {\n      //         if (resp.status !== 200) {\n      //             throw new Error(`Request failed: ${resp.status}`);\n      //         }\n      //     })\n      //     .catch(err => {\n      //         console.log(err.response);\n      //     })\n\n      toast.success('You have saved your settings successfully!');\n    };\n\n    this.state = {\n      minTemp: 20,\n      maxTemp: 37,\n      set_break_every: 7\n    };\n  }\n\n  async componentDidMount() {// TODO: ASK ALEX TO GET SESSION SAVED FOR USER\n    // Get all the settings saved for the user\n    // await axios.get(baseURL+\"/session/\").then((res) =>{\n    //     let data = res.data\n    //     console.log(\"Settings data from backend:\",data)\n    //     this.setState({minTemp: data})\n    // })\n  } // This function will be sent to the child class RangeSlider to get the new changed minmax temperatures which will be saved in the state\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n        autoClose: false,\n        limit: 1,\n        position: \"top-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Minimum and Maximum Temperature:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select the desired interval for your temperature in your room and get alarmed when it gets lower or higher:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            margin: 20\n          },\n          children: /*#__PURE__*/_jsxDEV(RangeSlider, {\n            handleChangeTemp: this.handleChangeTemp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Break After X Minutes:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"After how many minutes should you be reminded to take a break\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: 0,\n          max: 1440 //default = {200}\n          ,\n          placeholder: this.state.set_break_every //\"in minutes\"\n          ,\n          name: \"set_break_every\",\n          onChange: this.onInputchange,\n          value: this.state.set_break_every,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 40\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.sendUpdatedSettings,\n          children: \"Save Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/ASE/project thingy/thingy-client-purple/src/components/Home.js"],"names":["React","Component","Box","Slider","RangeSlider","axios","ToastContainer","toast","baseURL","Home","constructor","handleChangeTemp","newValue","setState","minTemp","maxTemp","console","log","state","onInputchange","event","preventDefault","target","name","value","sendUpdatedSettings","e","updated_settings","set_break_every","success","componentDidMount","render","display","justifyContent","alignItems","margin"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Slider from '@mui/material/Slider';\r\nimport RangeSlider from \"./RangeSlider\";\r\nimport axios from \"axios\";\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst baseURL = \"http://localhost:8080\"\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            minTemp: 20,\r\n            maxTemp: 37,\r\n            set_break_every: 7,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // TODO: ASK ALEX TO GET SESSION SAVED FOR USER\r\n        // Get all the settings saved for the user\r\n        // await axios.get(baseURL+\"/session/\").then((res) =>{\r\n        //     let data = res.data\r\n        //     console.log(\"Settings data from backend:\",data)\r\n        //     this.setState({minTemp: data})\r\n        // })\r\n    }\r\n\r\n    // This function will be sent to the child class RangeSlider to get the new changed minmax temperatures which will be saved in the state\r\n    handleChangeTemp = (newValue) => {\r\n        this.setState({\r\n            minTemp: newValue[0],\r\n            maxTemp: newValue[1],\r\n        })\r\n        console.log(this.state)\r\n    };\r\n\r\n    // Gets the input of the user for the minutes of the next break\r\n    onInputchange = event => {\r\n        event.preventDefault()\r\n        console.log(\"event:\",event.target.name)\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n        console.log(\"on input change:\",this.state)\r\n    }\r\n\r\n    // Send the updated settings to the backend\r\n    sendUpdatedSettings = async (e)=>{\r\n        e.preventDefault()\r\n\r\n        let updated_settings = {\r\n            minTemp: this.state.minTemp,\r\n            maxTemp: this.state.maxTemp,\r\n            set_break_every: this.state.set_break_every,\r\n        }\r\n\r\n        // Send creation of session to backend and get the session_start of the backend\r\n        console.log(\"This data will be sent to the backend: \", updated_settings)\r\n\r\n        // TODO: ASK ALEX TO CREATE A NEW POST for saving the updated settings\r\n        // await axios.post(baseURL+'/session/', updated_settings, {})\r\n        //     .then(resp => {\r\n        //         if (resp.status !== 200) {\r\n        //             throw new Error(`Request failed: ${resp.status}`);\r\n        //         }\r\n        //     })\r\n        //     .catch(err => {\r\n        //         console.log(err.response);\r\n        //     })\r\n        toast.success('You have saved your settings successfully!');\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <ToastContainer autoClose={false} limit={1} position=\"top-center\"/>\r\n                <h1>Settings</h1>\r\n                <h2>Minimum and Maximum Temperature:</h2>\r\n                <div >\r\n                    <p>Select the desired interval for your temperature in your room and get alarmed when it gets lower or higher:</p>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        margin: 20 }}>\r\n                        <RangeSlider\r\n                            handleChangeTemp = {this.handleChangeTemp}\r\n                        >\r\n                        </RangeSlider>\r\n                    </div>\r\n                    <h2>Break After X Minutes:</h2>\r\n                    <p>After how many minutes should you be reminded to take a break</p>\r\n                    <input\r\n                        type=\"number\"\r\n                        min={0}\r\n                        max={1440}\r\n                        //default = {200}\r\n                        placeholder= {this.state.set_break_every}//\"in minutes\"\r\n                        name=\"set_break_every\"\r\n                        onChange={this.onInputchange}\r\n                        value={this.state.set_break_every}\r\n                        required\r\n                    />\r\n                </div>\r\n               <div style={{\r\n                   margin: 40 }}>\r\n                   <button onClick={this.sendUpdatedSettings}>Save Settings</button>\r\n\r\n               </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}