{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\ASE\\\\project thingy\\\\thingy-client-purple\\\\src\\\\components\\\\StudySession.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './StudySession.css';\nimport AreaRechartComponent from \"./AreaRechartComponent\";\nimport ScrollToTop from \"./ScrollToTop\"; // Notify user with short messages\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"http://localhost:8080\";\n\nclass StudySession extends Component {\n  constructor() {\n    super(); // Update input title to state.currentTitle\n\n    this.getData = async () => {\n      try {\n        //Get current co2 measurement\n        await axios.get(baseURL + \"/CO2/\").then(async res => {\n          let data = res.data.data;\n          console.log(\"CO2 data:\", data);\n          this.setState({\n            currentCO2: data\n          });\n        }); //Get current temp measurement\n\n        await axios.get(baseURL + \"/temp/\").then(res => {\n          let data = res.data.data;\n          console.log(\"Temperature data:\", data);\n          this.setState({\n            currentTemp: data\n          });\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.createSessionHandler = async e => {\n      e.preventDefault();\n      let new_session = {\n        session_id: this.state.sessions.length,\n        session_name: this.state.currentTitle,\n        session_stopped: 0,\n        session_breakTime: 0\n      }; // Send creation of session to backend and get the session_start of the backend\n\n      console.log(\"This data will be sent to the backend: \", new_session);\n      await axios.post(baseURL + '/session/', new_session, {}).then(resp => {\n        console.log(\"create Session respond:\", resp);\n        new_session[\"session_start\"] = resp[\"data\"][\"session_start\"];\n\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      }); // Add the created session to the list of sessions\n\n      let sessions = [new_session, ...this.state.sessions];\n      await this.setState({\n        session_ongoing: 1\n      });\n      await this.setState({\n        ongoing_session_id: new_session.session_id\n      });\n      await this.getMeasurements();\n      await this.setState({\n        sessions\n      });\n      console.log(\"State after created session: \", this.state);\n    };\n\n    this.stopSessionHandler = async e => {\n      e.preventDefault();\n      let sessions;\n      await axios.post(baseURL + '/session/stop/', {}).then(resp => {\n        sessions = this.state.sessions.map(session => session.session_id === this.state.sessions.length - 1 ? { ...session,\n          session_end: resp[\"data\"][\"session_end\"],\n          session_stopped: 1\n        } : session);\n        console.log(\"sessions after stopped\", this.state);\n\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      });\n      console.log(\"only after getting the measurements of new session\");\n      await this.getMeasurements();\n      await this.setState({\n        session_ongoing: 0\n      });\n      await this.setState({\n        sessions\n      });\n    };\n\n    this.getMeasurements = async () => {\n      //get CO2 for all sessions and store it, so it can be used for area chart\n      await axios.get(baseURL + \"/CO2/\").then(res => {\n        let data = res.data;\n        console.log(\"DATA TEMP\", data); //dictionary will then be stored in allSessionsCO2. As format for area chart\n\n        let newDict = []; //iterate over whole data to get key (id of session) and value (list of all CO2 measurements)\n\n        Object.entries(data).length > 0 && Object.entries(data).map(([key, value]) => {\n          //array to store each dict of one session which is used for area chart: name and CO2\n          let array = [];\n          console.log(key, value);\n          Object.entries(value).map(([index, oneMeasure]) => {\n            array.push({\n              name: \"\",\n              CO2: oneMeasure\n            });\n          });\n          console.log(\"new array for areachart\", array); //add each session to the new dictionary\n\n          newDict.push({\n            id: key,\n            measurements: array\n          });\n          console.log(\"New dict: \", newDict);\n        }); //set state to the new dictionary\n\n        this.setState({\n          allSessionsCO2: newDict\n        });\n      }); //same as above but for temp: get temp for all sessions and store it, so it can be used for area chart\n\n      await axios.get(baseURL + \"/temp/\").then(res => {\n        let data = res.data;\n        console.log(\"DATA TEMP\", data); //dictionary will then be stored in allSessionsTemp. As format for area chart\n\n        let newDict = []; //iterate over whole data to get key (nid of session) and value (list of all temp measurements)\n\n        Object.entries(data).length > 0 && Object.entries(data).map(([key, value]) => {\n          //array to store each dict of one session which is used for area chart: name and temp\n          let array = [];\n          console.log(key, value);\n          Object.entries(value).map(([index, oneMeasure]) => {\n            array.push({\n              name: \"\",\n              Temperature: oneMeasure\n            });\n          });\n          console.log(\"new array for areachart\", array); //add each session to the new dictionary\n\n          newDict.push({\n            id: key,\n            measurements: array\n          });\n          console.log(\"New dict: \", newDict);\n        }); //set state to the new dictionary\n\n        this.setState({\n          allSessionsTemp: newDict\n        });\n      });\n    };\n\n    this.deleteSessionHandler = async e => {\n      e.preventDefault();\n      let sessions = [];\n      this.setState({\n        sessions\n      });\n      axios.delete(baseURL + '/session/', {}).then(resp => {\n        if (resp.status !== 200) {\n          throw new Error(`Request failed: ${resp.status}`);\n        }\n      }).catch(err => {\n        console.log(err.response);\n      });\n      await this.getMeasurements();\n    };\n\n    this.checkNotificationsHandler = async () => {\n      // Get all notifications from backend\n      await axios.get(baseURL + \"/session/check/\").then(res => {\n        let data = res.data;\n        console.log(\"Notifications checks:\", data); // Overwrite the notification values from the backend\n\n        this.setState({\n          list_of_notifications: data\n        });\n      });\n      console.log(\"State after updated notifications: \", this.state); // Check notifications and alarm the user\n\n      if (this.state.list_of_notifications.make_break) {\n        toast.warning('You need a break! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          make_break: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.open_window) {\n        toast.warning('You need to open the window! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          open_window: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.air_quality_wrong) {\n        toast.warning('You need to open the window since the air quality is bad! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          air_quality_wrong: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.alarm_humidity_wrong) {\n        toast.warning('You need to open the window since the humidity is bad! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          alarm_humidity_wrong: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.alarm_temperature_cold) {\n        toast.warning('It is colder than the limited set in settings! Turn on the heating! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          alarm_temperature_cold: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n\n      if (this.state.list_of_notifications.alarm_temperature_hot) {\n        toast.warning('It is colder than the limited set in settings! Turn off the heating or open the window! ');\n        const list_of_notifications = { ...this.state.list_of_notifications,\n          alarm_temperature_hot: false\n        };\n        this.setState({\n          list_of_notifications\n        });\n      }\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      inform_notifications_every_sec: 30000,\n      // every x seconds check for notifications and inform the user\n      session_ongoing: 0,\n      // Boolean: is there a current session ongoing? then do not show delete button\n      currentTitle: \"\",\n      // currentTitle to be set by the user -> will be pushed to the backend as session_name when creating a new session\n      sessions: [// {\n        //     session_id: integer, // Every session has an unique ID\n        //     session_name: string, // Name of the session\n        //     session_start: date // date and time the session started\n        //     session_end: date // date and time the session stopped\n        //     session_breakTime: date // date and time when the next break is\n        //     session_duration: date // date and time between start and end\n        //     session_stopped: 0 // true if the session was stopped, false if it is still ongoing\n        // }\n      ],\n      // Will be updated by the server and received from the backend with a get every x seconds\n      list_of_notifications: {\n        open_window: false,\n        make_break: false,\n        alarm_humidity_wrong: false,\n        air_quality_wrong: false,\n        alarm_temperature_cold: false,\n        alarm_temperature_hot: false\n      },\n      currentCO2: \"\",\n      currentTemp: \"\",\n      avgCO2: \"example\",\n      avgTemp: \"example\",\n      allSessionsTemp: \"\",\n      //list of all temp measurements (all sessions)\n      allSessionsCO2: \"\" //list of all co2 measurements (all sessions)\n\n    };\n  }\n\n  async componentDidMount() {\n    await this.getMeasurements(); //TODO: should we still show current or not?\n    //update current temp and co2 every x seconds\n    //await this.getData()\n    //this.myInterval = setInterval(this.getData,10000) //every 10 seconds\n    //TODO: show average measurements?\n    //\n    // Update notifications every x seconds\n\n    await this.checkNotificationsHandler();\n    this.mySecondInterval = setInterval(this.checkNotificationsHandler, this.state.inform_notifications_every_sec); // Get all sessions from backend\n\n    await axios.get(baseURL + \"/session/\").then(res => {\n      let data = res.data;\n      console.log(\"Session data from backend get all sessions:\", data);\n      this.setState({\n        sessions: data\n      }); // check if a session is ongoing\n\n      if (this.state.sessions.length > 0) {\n        if (this.state.sessions[this.state.sessions.length - 1].session_stopped) {\n          this.setState({\n            session_ongoing: 0\n          });\n        } else {\n          this.setState({\n            session_ongoing: 1\n          });\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n    clearInterval(this.mySecondInterval);\n  } // Input user for title of a session\n\n\n  handleChange(event) {\n    event.preventDefault();\n    this.setState({\n      currentTitle: event.target.value\n    });\n  } //get current temp and co2\n\n\n  render() {\n    // List of all sessions completed\n    let sessionsList = this.state.sessions.map(session => {\n      //console.log(\"TEST ID\",session.session_id)\n      if (session.session_stopped) {\n        //iterate to find temp measurements of the right id\n        let sessionMeasTemp = null;\n        this.state.allSessionsTemp.map(entry => {\n          if (entry.id == session.session_id) {\n            sessionMeasTemp = entry.measurements; //console.log(\"right id: \", entry.id)\n          }\n        }); //console.log(\"sessionmeasTemp\", sessionMeasTemp)\n        //iterate to find co2 measurements of the right id\n\n        let sessionMeasCO2 = null;\n        this.state.allSessionsCO2.map(entry => {\n          if (entry.id == session.session_id) {\n            sessionMeasCO2 = entry.measurements / console.log(\"right id: \", entry.id);\n          }\n        }); //console.log(\"sessionmeasCO2\", sessionMeasCO2)\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sessionElem\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: session.session_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 36\n              }, this), \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Session ID:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 68\n              }, this), \" \", session.session_id, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Session Start:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 110\n              }, this), \" \", session.session_start, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Session End:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 74\n              }, this), \" \", session.session_end]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 33\n            }, this), sessionMeasTemp == null ? \"\" : /*#__PURE__*/_jsxDEV(AreaRechartComponent, {\n              type: \"Temperature\",\n              data: sessionMeasTemp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 65\n            }, this), sessionMeasCO2 == null ? \"\" : /*#__PURE__*/_jsxDEV(AreaRechartComponent, {\n              type: \"CO2\",\n              data: sessionMeasCO2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 64\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 29\n          }, this)\n        }, session.session_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 25\n        }, this);\n      }\n    }); // List of current active session\n\n    let currentSession = this.state.sessions.map(session => {\n      if (!session.session_stopped) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: session.session_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 32\n          }, this), \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Session ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 64\n          }, this), \" \", session.session_id, \" | \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Session Start:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 106\n          }, this), \" \", session.session_start]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 29\n        }, this)\n      }, session.session_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 25\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backgroundMeasurements\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elem\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Average measurements\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Average Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.avgTemp, \"\\xB0 C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Average CO2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.avgCO2, \" CO2e\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n          autoClose: false,\n          limit: 1,\n          position: \"top-center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backgroundStudySession\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elem\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"STUDY SESSION\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Current study sessions: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Name: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Enter an optional name\",\n                  onKeyPress: e => {\n                    e.key === 'Enter' && e.preventDefault();\n                  },\n                  value: this.state.currentTitle,\n                  onChange: this.handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 37\n            }, this), this.state.session_ongoing !== 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.createSessionHandler,\n              children: \"Create New Session\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.stopSessionHandler,\n              children: \"Stop Session\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 39\n            }, this), currentSession, /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 33\n            }, this), this.state.sessions.length > 0 && this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Past study sessions: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 33\n            }, this), this.state.sessions.length > 0 && !this.state.session_ongoing && this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.deleteSessionHandler,\n              children: \"Delete all Sessions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 33\n            }, this), sessionsList]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default StudySession;","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/ASE/project thingy/thingy-client-purple/src/components/StudySession.js"],"names":["React","Component","axios","AreaRechartComponent","ScrollToTop","ToastContainer","toast","baseURL","StudySession","constructor","getData","get","then","res","data","console","log","setState","currentCO2","currentTemp","e","createSessionHandler","preventDefault","new_session","session_id","state","sessions","length","session_name","currentTitle","session_stopped","session_breakTime","post","resp","status","Error","catch","err","response","session_ongoing","ongoing_session_id","getMeasurements","stopSessionHandler","map","session","session_end","newDict","Object","entries","key","value","array","index","oneMeasure","push","name","CO2","id","measurements","allSessionsCO2","Temperature","allSessionsTemp","deleteSessionHandler","delete","checkNotificationsHandler","list_of_notifications","make_break","warning","open_window","air_quality_wrong","alarm_humidity_wrong","alarm_temperature_cold","alarm_temperature_hot","handleChange","bind","inform_notifications_every_sec","avgCO2","avgTemp","componentDidMount","mySecondInterval","setInterval","componentWillUnmount","clearInterval","myInterval","event","target","render","sessionsList","sessionMeasTemp","entry","sessionMeasCO2","session_start","currentSession"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport './StudySession.css';\r\nimport AreaRechartComponent from \"./AreaRechartComponent\";\r\nimport ScrollToTop from \"./ScrollToTop\";\r\n\r\n// Notify user with short messages\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst baseURL = \"http://localhost:8080\"\r\n\r\n\r\n\r\n\r\nclass StudySession extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Update input title to state.currentTitle\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.state = {\r\n            inform_notifications_every_sec: 30000, // every x seconds check for notifications and inform the user\r\n            session_ongoing: 0, // Boolean: is there a current session ongoing? then do not show delete button\r\n            currentTitle: \"\", // currentTitle to be set by the user -> will be pushed to the backend as session_name when creating a new session\r\n            sessions: [\r\n                // {\r\n                //     session_id: integer, // Every session has an unique ID\r\n                //     session_name: string, // Name of the session\r\n                //     session_start: date // date and time the session started\r\n                //     session_end: date // date and time the session stopped\r\n                //     session_breakTime: date // date and time when the next break is\r\n                //     session_duration: date // date and time between start and end\r\n                //     session_stopped: 0 // true if the session was stopped, false if it is still ongoing\r\n                // }\r\n            ],\r\n\r\n            // Will be updated by the server and received from the backend with a get every x seconds\r\n            list_of_notifications:{\r\n                open_window: false,\r\n                make_break: false,\r\n                alarm_humidity_wrong: false,\r\n                air_quality_wrong: false,\r\n                alarm_temperature_cold: false,\r\n                alarm_temperature_hot: false,\r\n            },\r\n\r\n            currentCO2: \"\",\r\n            currentTemp: \"\",\r\n            avgCO2:\"example\",\r\n            avgTemp:\"example\",\r\n\r\n            allSessionsTemp:\"\", //list of all temp measurements (all sessions)\r\n            allSessionsCO2: \"\", //list of all co2 measurements (all sessions)\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        await this.getMeasurements()\r\n\r\n        //TODO: should we still show current or not?\r\n        //update current temp and co2 every x seconds\r\n        //await this.getData()\r\n        //this.myInterval = setInterval(this.getData,10000) //every 10 seconds\r\n\r\n        //TODO: show average measurements?\r\n        //\r\n\r\n        // Update notifications every x seconds\r\n        await this.checkNotificationsHandler()\r\n        this.mySecondInterval = setInterval(this.checkNotificationsHandler, this.state.inform_notifications_every_sec)\r\n\r\n        // Get all sessions from backend\r\n        await axios.get(baseURL+\"/session/\").then((res) =>{\r\n            let data = res.data\r\n            console.log(\"Session data from backend get all sessions:\",data)\r\n            this.setState({sessions: data})\r\n\r\n            // check if a session is ongoing\r\n            if(this.state.sessions.length > 0){\r\n                if (this.state.sessions[this.state.sessions.length-1].session_stopped){\r\n                    this.setState({\r\n                        session_ongoing: 0,\r\n                    })\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        session_ongoing: 1,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.myInterval);\r\n        clearInterval(this.mySecondInterval);\r\n    }\r\n\r\n    // Input user for title of a session\r\n    handleChange(event) {\r\n        event.preventDefault()\r\n        this.setState({currentTitle: event.target.value});\r\n    }\r\n\r\n    //get current temp and co2\r\n    getData=async () => {\r\n        try {\r\n            //Get current co2 measurement\r\n            await axios.get(baseURL + \"/CO2/\").then(async (res) => {\r\n                let data = res.data.data\r\n                console.log(\"CO2 data:\", data)\r\n                this.setState({\r\n                    currentCO2: data\r\n                })\r\n            })\r\n\r\n            //Get current temp measurement\r\n            await axios.get(baseURL + \"/temp/\").then((res) => {\r\n                let data = res.data.data\r\n                console.log(\"Temperature data:\", data)\r\n                this.setState({currentTemp: data})\r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n\r\n    // Creates Session and increments number of session and ongoing session will be true\r\n    createSessionHandler = async (e)=>{\r\n        e.preventDefault()\r\n\r\n        let new_session = {\r\n            session_id: this.state.sessions.length,\r\n            session_name: this.state.currentTitle,\r\n            session_stopped: 0,\r\n            session_breakTime: 0,\r\n        }\r\n\r\n        // Send creation of session to backend and get the session_start of the backend\r\n        console.log(\"This data will be sent to the backend: \", new_session)\r\n\r\n        await axios.post(baseURL+'/session/', new_session, {})\r\n             .then(resp => {\r\n                 console.log(\"create Session respond:\", resp)\r\n                 new_session[\"session_start\"] = resp[\"data\"][\"session_start\"]\r\n                 if (resp.status !== 200) {\r\n                     throw new Error(`Request failed: ${resp.status}`);\r\n                 }\r\n             })\r\n             .catch(err => {\r\n                 console.log(err.response);\r\n             })\r\n\r\n        // Add the created session to the list of sessions\r\n         let sessions = [new_session, ...this.state.sessions]\r\n\r\n        await this.setState({\r\n            session_ongoing: 1,\r\n        })\r\n\r\n        await this.setState({ongoing_session_id: new_session.session_id})\r\n        await this.getMeasurements()\r\n        await this.setState({sessions})\r\n        console.log(\"State after created session: \",this.state)\r\n    }\r\n\r\n    // Stop the current session and get the session_end time from the backend and save it in the last session\r\n    stopSessionHandler = async (e)=>{\r\n        e.preventDefault()\r\n        let sessions\r\n        await axios.post(baseURL+'/session/stop/', {})\r\n            .then(resp => {\r\n                 sessions = this.state.sessions.map(session => (\r\n                    session.session_id===this.state.sessions.length-1 ? {...session, session_end: resp[\"data\"][\"session_end\"], session_stopped: 1}: session\r\n                ))\r\n                console.log(\"sessions after stopped\", this.state)\r\n\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n\r\n\r\n        console.log(\"only after getting the measurements of new session\")\r\n\r\n        await this.getMeasurements()\r\n\r\n        await this.setState({\r\n            session_ongoing: 0,\r\n        })\r\n\r\n        await this.setState({ sessions });\r\n\r\n\r\n    }\r\n\r\n\r\n    getMeasurements = async () => {\r\n        //get CO2 for all sessions and store it, so it can be used for area chart\r\n        await axios.get(baseURL + \"/CO2/\").then((res) => {\r\n            let data = res.data\r\n            console.log(\"DATA TEMP\", data)\r\n\r\n            //dictionary will then be stored in allSessionsCO2. As format for area chart\r\n            let newDict = []\r\n\r\n            //iterate over whole data to get key (id of session) and value (list of all CO2 measurements)\r\n            Object.entries(data).length > 0 &&\r\n            Object.entries(data).map(([key, value]) => {\r\n                //array to store each dict of one session which is used for area chart: name and CO2\r\n                let array = []\r\n                console.log(key, value)\r\n                Object.entries(value).map(([index, oneMeasure]) => {\r\n                    array.push(\r\n                        {\r\n                            name: \"\",\r\n                            CO2: oneMeasure,\r\n\r\n                        }\r\n                    )\r\n                })\r\n                console.log(\"new array for areachart\", array)\r\n                //add each session to the new dictionary\r\n                newDict.push({\r\n                    id: key,\r\n                    measurements: array\r\n\r\n                })\r\n\r\n                console.log(\"New dict: \", newDict)\r\n            })\r\n\r\n            //set state to the new dictionary\r\n            this.setState({allSessionsCO2: newDict})\r\n\r\n        })\r\n\r\n        //same as above but for temp: get temp for all sessions and store it, so it can be used for area chart\r\n        await axios.get(baseURL + \"/temp/\").then((res) => {\r\n            let data = res.data\r\n            console.log(\"DATA TEMP\", data)\r\n\r\n            //dictionary will then be stored in allSessionsTemp. As format for area chart\r\n            let newDict = []\r\n\r\n            //iterate over whole data to get key (nid of session) and value (list of all temp measurements)\r\n            Object.entries(data).length > 0 &&\r\n            Object.entries(data).map(([key, value]) => {\r\n                //array to store each dict of one session which is used for area chart: name and temp\r\n                let array = []\r\n                console.log(key, value)\r\n                Object.entries(value).map(([index, oneMeasure]) => {\r\n                    array.push(\r\n                        {\r\n                            name: \"\",\r\n                            Temperature: oneMeasure,\r\n\r\n                        }\r\n                    )\r\n                })\r\n                console.log(\"new array for areachart\", array)\r\n                //add each session to the new dictionary\r\n                newDict.push({\r\n                    id: key,\r\n                    measurements: array\r\n\r\n                })\r\n                console.log(\"New dict: \", newDict)\r\n            })\r\n\r\n            //set state to the new dictionary\r\n            this.setState({allSessionsTemp: newDict})\r\n\r\n        })\r\n\r\n    }\r\n\r\n    // Deletes all sessions after clicking the delete button\r\n    deleteSessionHandler = async (e) => {\r\n        e.preventDefault()\r\n        let sessions = []\r\n        this.setState({sessions})\r\n        axios.delete(baseURL + '/session/', {})\r\n            .then(resp => {\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n        await this.getMeasurements()\r\n\r\n    }\r\n\r\n    // Check all 30 seconds the state of notifications and informs the user with toast\r\n    checkNotificationsHandler = async () => {\r\n\r\n        // Get all notifications from backend\r\n        await axios.get(baseURL+\"/session/check/\").then((res) =>{\r\n            let data = res.data\r\n            console.log(\"Notifications checks:\",data)\r\n            // Overwrite the notification values from the backend\r\n            this.setState({list_of_notifications: data})\r\n        })\r\n        console.log(\"State after updated notifications: \", this.state)\r\n\r\n        // Check notifications and alarm the user\r\n        if (this.state.list_of_notifications.make_break){\r\n            toast.warning('You need a break! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, make_break: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.open_window){\r\n            toast.warning('You need to open the window! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, open_window: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.air_quality_wrong){\r\n            toast.warning('You need to open the window since the air quality is bad! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, air_quality_wrong: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_humidity_wrong){\r\n            toast.warning('You need to open the window since the humidity is bad! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_humidity_wrong: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_temperature_cold){\r\n            toast.warning('It is colder than the limited set in settings! Turn on the heating! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_temperature_cold: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_temperature_hot){\r\n            toast.warning('It is colder than the limited set in settings! Turn off the heating or open the window! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_temperature_hot: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        // List of all sessions completed\r\n            let sessionsList = this.state.sessions.map(session => {\r\n                //console.log(\"TEST ID\",session.session_id)\r\n                if (session.session_stopped) {\r\n\r\n                    //iterate to find temp measurements of the right id\r\n                    let sessionMeasTemp = null\r\n                    this.state.allSessionsTemp.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasTemp = entry.measurements\r\n                            //console.log(\"right id: \", entry.id)\r\n                        }\r\n                    })\r\n                    //console.log(\"sessionmeasTemp\", sessionMeasTemp)\r\n\r\n                    //iterate to find co2 measurements of the right id\r\n                    let sessionMeasCO2 = null\r\n                    this.state.allSessionsCO2.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasCO2 = entry.measurements\r\n                            /console.log(\"right id: \", entry.id)\r\n                        }\r\n                    })\r\n                    //console.log(\"sessionmeasCO2\", sessionMeasCO2)\r\n\r\n                    return (\r\n                        <div key={session.session_id}>\r\n                            <div className={\"sessionElem\"}>\r\n                                <p><b>{session.session_name}</b> | <b>Session ID:</b> {session.session_id} | <b>Session\r\n                                    Start:</b> {session.session_start} | <b>Session End:</b> {session.session_end}</p>\r\n                                {/*| <b>Session Duartion:</b> {session.session_end - session.session_start)}</p>*/}\r\n                                {sessionMeasTemp == null ? \"\" : <AreaRechartComponent type={\"Temperature\"}\r\n                                                                                data={sessionMeasTemp}></AreaRechartComponent>}\r\n                                {sessionMeasCO2 == null ? \"\" : <AreaRechartComponent type={\"CO2\"}\r\n                                                                                  data={sessionMeasCO2}></AreaRechartComponent>}\r\n\r\n                                {/* <AreaRechartComponent type={\"CO2\"}8148f3b4c0ed\r\n                                                  data={this.state.allSessionsCO2[session.session_id][session.session_name]}></AreaRechartComponent>*/}\r\n                            </div>\r\n                        </div>\r\n\r\n                    )\r\n                }\r\n            })\r\n            // List of current active session\r\n            let currentSession = this.state.sessions.map(session => {\r\n                if (!session.session_stopped)\r\n                    return (\r\n                        <div key={session.session_id}>\r\n                            <p><b>{session.session_name}</b> | <b>Session ID:</b> {session.session_id} | <b>Session\r\n                                Start:</b> {session.session_start}</p>\r\n                        </div>\r\n\r\n                    )\r\n            })\r\n\r\n            return (\r\n                <div className={\"back\"}>\r\n                    <div className={\"background\"}>\r\n\r\n                        <div className={\"backgroundMeasurements\"}>\r\n                            {/*<div className={\"elem\"}>\r\n                                <h1>Current measurements</h1>\r\n                                <h2>Temperature</h2>\r\n                                <p>{this.state.currentTemp}° C</p>\r\n                                <h2>CO2</h2>\r\n                                <p>{this.state.currentCO2} CO2e</p>\r\n                            </div>*/}\r\n                            <div className={\"elem\"}>\r\n                                <h1>Average measurements</h1>\r\n                                <h2>Average Temperature</h2>\r\n                                <p>{this.state.avgTemp}° C</p>\r\n                                <h2>Average CO2</h2>\r\n                                <p>{this.state.avgCO2} CO2e</p>\r\n                            </div>\r\n                        </div>\r\n                        <ToastContainer autoClose={false} limit={1} position=\"top-center\"/>\r\n\r\n                        <div className={\"backgroundStudySession\"}>\r\n                            <div className={\"elem\"}>\r\n                                <h1>STUDY SESSION</h1>\r\n                                <h2>Current study sessions: </h2>\r\n                                {\r\n                                    <form>\r\n                                        <label>\r\n                                            <b>Name: </b>\r\n                                            <input type=\"text\" placeholder={\"Enter an optional name\"}\r\n                                                   onKeyPress={(e) => {\r\n                                                       e.key === 'Enter' && e.preventDefault();\r\n                                                   }} value={this.state.currentTitle} onChange={this.handleChange}/>\r\n                                        </label>\r\n                                    </form>\r\n                                }\r\n                                {this.state.session_ongoing !== 1 ?\r\n                                    <button onClick={this.createSessionHandler}>Create New Session</button>\r\n                                    : <button onClick={this.stopSessionHandler}>Stop Session</button>}\r\n\r\n                                {currentSession}\r\n                                <p></p>\r\n\r\n                                {(this.state.sessions.length > 0) && (this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0) &&\r\n                                <h2>Past study sessions: </h2>}\r\n                                {(this.state.sessions.length > 0) && (!this.state.session_ongoing) && (this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0) &&\r\n                                <button onClick={this.deleteSessionHandler}>Delete all Sessions</button>}\r\n\r\n                                {sessionsList}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <ScrollToTop></ScrollToTop>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            )\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default StudySession;"]},"metadata":{},"sourceType":"module"}