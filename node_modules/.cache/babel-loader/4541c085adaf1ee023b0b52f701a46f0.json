{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbuch\\\\Documents\\\\Master\\\\SecondSemester\\\\MMI\\\\thingy-client-purple\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"; // fake data generator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItems = (count, offset = 0) => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k + offset}-${new Date().getTime()}`,\n  content: `item ${k + offset}`\n}));\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\r\n * Moves an item from one list to another list.\r\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction QuoteApp() {\n  _s();\n\n  const [state, setState] = useState([getItems(10), getItems(5, 10)]);\n\n  function onDragEnd(result) {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n      setState(newState.filter(group => group.length));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        setState([...state, []]);\n      },\n      children: \"Add new group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        setState([...state, getItems(1)]);\n      },\n      children: \"Add new item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: state.map((el, ind) => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: `${ind}`,\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            style: getListStyle(snapshot.isDraggingOver),\n            ...provided.droppableProps,\n            children: [el.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: item.id,\n              index: index,\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: \"flex\",\n                    justifyContent: \"space-around\"\n                  },\n                  children: [item.content, /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => {\n                      const newState = [...state];\n                      newState[ind].splice(index, 1);\n                      setState(newState.filter(group => group.length));\n                    },\n                    children: \"delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 49\n              }, this)\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 41\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this)\n        }, ind, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(QuoteApp, \"q1BLPtfl0KU06u/rzATV+yMKpwQ=\");\n\n_c = QuoteApp;\nexport default function App() {\n  const rootElement = document.getElementById(\"root\");\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(QuoteApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 21\n  }, this), rootElement);\n}\n_c2 = App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuoteApp\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/pbuch/Documents/Master/SecondSemester/MMI/thingy-client-purple/src/components/Login/Login.js"],"names":["React","useState","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","offset","Array","from","length","v","k","map","id","Date","getTime","content","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","QuoteApp","state","setState","onDragEnd","sInd","dInd","items","newState","filter","group","display","el","ind","provided","snapshot","innerRef","droppableProps","item","draggableProps","dragHandleProps","style","justifyContent","placeholder","App","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}-${new Date().getTime()}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: \"none\",\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n    padding: grid,\r\n    width: 250\r\n});\r\n\r\nfunction QuoteApp() {\r\n    const [state, setState] = useState([getItems(10), getItems(5, 10)]);\r\n\r\n    function onDragEnd(result) {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n        const sInd = +source.droppableId;\r\n        const dInd = +destination.droppableId;\r\n\r\n        if (sInd === dInd) {\r\n            const items = reorder(state[sInd], source.index, destination.index);\r\n            const newState = [...state];\r\n            newState[sInd] = items;\r\n            setState(newState);\r\n        } else {\r\n            const result = move(state[sInd], state[dInd], source, destination);\r\n            const newState = [...state];\r\n            newState[sInd] = result[sInd];\r\n            newState[dInd] = result[dInd];\r\n\r\n            setState(newState.filter(group => group.length));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                    setState([...state, []]);\r\n                }}\r\n            >\r\n                Add new group\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                    setState([...state, getItems(1)]);\r\n                }}\r\n            >\r\n                Add new item\r\n            </button>\r\n            <div style={{ display: \"flex\" }}>\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    {state.map((el, ind) => (\r\n                        <Droppable key={ind} droppableId={`${ind}`}>\r\n                            {(provided, snapshot) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(snapshot.isDraggingOver)}\r\n                                    {...provided.droppableProps}\r\n                                >\r\n                                    {el.map((item, index) => (\r\n                                        <Draggable\r\n                                            key={item.id}\r\n                                            draggableId={item.id}\r\n                                            index={index}\r\n                                        >\r\n                                            {(provided, snapshot) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps.style\r\n                                                    )}\r\n                                                >\r\n                                                    <div\r\n                                                        style={{\r\n                                                            display: \"flex\",\r\n                                                            justifyContent: \"space-around\"\r\n                                                        }}\r\n                                                    >\r\n                                                        {item.content}\r\n                                                        <button\r\n                                                            type=\"button\"\r\n                                                            onClick={() => {\r\n                                                                const newState = [...state];\r\n                                                                newState[ind].splice(index, 1);\r\n                                                                setState(\r\n                                                                    newState.filter(group => group.length)\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            delete\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    ))}\r\n                </DragDropContext>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default function App() {\r\n    const rootElement = document.getElementById(\"root\");\r\n    ReactDOM.render(<QuoteApp />, rootElement);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}