[{"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\index.js":"1","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\reportWebVitals.js":"2","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\App.js":"3","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\StudySession.js":"4","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\NavBar\\Nav.js":"5","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\AreaRechartComponent.js":"6","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\RangeSlider.js":"7","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\Settings.js":"8","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\ProtectedRoute.js":"9","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\Signup\\Signup.js":"10","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\common\\auth-verify.js":"11","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\Login\\Login.js":"12","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\services\\Authservice.js":"13","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\services\\authheader.js":"14","C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\ScrollToTop\\ScrollToTop.js":"15","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\index.js":"16","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\App.js":"17","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\reportWebVitals.js":"18","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\Settings.js":"19","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\ProtectedRoute.js":"20","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\StudySession.js":"21","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\NavBar\\Nav.js":"22","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\Login\\Folders.js":"23","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\Signup\\Signup.js":"24","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\common\\auth-verify.js":"25","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\services\\Authservice.js":"26","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\services\\authheader.js":"27","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\RangeSlider.js":"28","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\AreaRechartComponent.js":"29","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\ScrollToTop\\ScrollToTop.js":"30","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\Login\\Gazer.js":"31"},{"size":517,"mtime":1634671524907,"results":"32","hashOfConfig":"33"},{"size":375,"mtime":1634671524908,"results":"34","hashOfConfig":"33"},{"size":1956,"mtime":1640089465515,"results":"35","hashOfConfig":"33"},{"size":19392,"mtime":1640183573826,"results":"36","hashOfConfig":"33"},{"size":2061,"mtime":1640089465521,"results":"37","hashOfConfig":"33"},{"size":1854,"mtime":1640089465517,"results":"38","hashOfConfig":"33"},{"size":1423,"mtime":1640112653612,"results":"39","hashOfConfig":"33"},{"size":4701,"mtime":1640157969937,"results":"40","hashOfConfig":"33"},{"size":516,"mtime":1640089465523,"results":"41","hashOfConfig":"33"},{"size":7823,"mtime":1640089465527,"results":"42","hashOfConfig":"33"},{"size":988,"mtime":1640089465530,"results":"43","hashOfConfig":"33"},{"size":6178,"mtime":1640089465519,"results":"44","hashOfConfig":"33"},{"size":1651,"mtime":1640089465531,"results":"45","hashOfConfig":"33"},{"size":718,"mtime":1639921385754,"results":"46","hashOfConfig":"33"},{"size":874,"mtime":1640089465525,"results":"47","hashOfConfig":"33"},{"size":517,"mtime":1634671524907,"results":"48","hashOfConfig":"49"},{"size":2175,"mtime":1653889685540,"results":"50","hashOfConfig":"49"},{"size":375,"mtime":1634671524908,"results":"51","hashOfConfig":"49"},{"size":4701,"mtime":1640157969937,"results":"52","hashOfConfig":"49"},{"size":523,"mtime":1653940195018,"results":"53","hashOfConfig":"49"},{"size":19392,"mtime":1640185889323,"results":"54","hashOfConfig":"49"},{"size":2080,"mtime":1651666150497,"results":"55","hashOfConfig":"49"},{"size":22768,"mtime":1653938523214,"results":"56","hashOfConfig":"49"},{"size":7823,"mtime":1640089465527,"results":"57","hashOfConfig":"49"},{"size":988,"mtime":1640089465530,"results":"58","hashOfConfig":"49"},{"size":1651,"mtime":1640089465531,"results":"59","hashOfConfig":"49"},{"size":718,"mtime":1639921385754,"results":"60","hashOfConfig":"49"},{"size":1423,"mtime":1640112653612,"results":"61","hashOfConfig":"49"},{"size":1854,"mtime":1640089465517,"results":"62","hashOfConfig":"49"},{"size":874,"mtime":1640089465525,"results":"63","hashOfConfig":"49"},{"size":26086,"mtime":1653921055347,"results":"64","hashOfConfig":"49"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"7a5yx4",{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iecfd2",{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":1,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":1,"source":"134"},"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\index.js",[],["135","136"],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\reportWebVitals.js",[],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\App.js",["137","138"],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\StudySession.js",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156"],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\NavBar\\Nav.js",["157","158","159","160","161"],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\AreaRechartComponent.js",["162"],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\RangeSlider.js",[],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\Settings.js",[],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\ProtectedRoute.js",["163"],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\Signup\\Signup.js",["164"],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\common\\auth-verify.js",[],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\Login\\Login.js",["165"],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\services\\Authservice.js",[],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\services\\authheader.js",[],"C:\\Users\\pbuch\\Documents\\Master\\ASE\\project thingy\\thingy-client-purple\\src\\components\\ScrollToTop\\ScrollToTop.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\index.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\App.js",["166","167"],"import './App.css';\r\nimport {BrowserRouter, Redirect, Route, Router, Switch} from \"react-router-dom\";\r\nimport Settings from './components/Settings.js'\r\nimport Nav from \"./components/NavBar/Nav\";\r\nimport StudySession from \"./components/StudySession\";\r\nimport Folders from \"./components/Login/Folders\";\r\nimport Signup from \"./components/Signup/Signup\"\r\nimport AuthVerify from \"./components/common/auth-verify\";\r\nimport Authservice from \"./components/services/Authservice\";\r\nimport {Component} from \"react\";\r\nimport ProtectedRoute from \"./components/ProtectedRoute\";\r\nimport Gazer from \"./components/Login/Gazer\";\r\n\r\n\r\nclass App extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.logOut = this.logOut.bind(this)\r\n        this.state ={\r\n            currentUser: undefined,\r\n            xoffset: 1000,\r\n            yoffset: 1000,\r\n            delta: 10,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //logout if token expired\r\n    logOut() {\r\n        Authservice.logout();\r\n        this.setState({\r\n            currentUser: undefined,\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                <div className={\"back\"}>\r\n                    <BrowserRouter>\r\n                        <Nav />\r\n                        <div className={\"background\"}>\r\n\r\n                        <Switch>\r\n                            <ProtectedRoute exact path=\"/studysession\" component={StudySession}/>\r\n                            <Route exact path=\"/gazer\" component={Gazer}/>\r\n                            <Route exact path=\"/folders\" component={Folders}/>\r\n                            <Route exact path=\"/signup\" component={Signup}/>\r\n                            <ProtectedRoute exact path=\"/settings\" component={Settings}/>\r\n                            <ProtectedRoute path=\"*\" component={StudySession}/>\r\n                            <Route path=\"*\" component={Folders}/>\r\n                        </Switch>\r\n\r\n                        <AuthVerify logOut={this.logOut}/>\r\n\r\n                        </div>\r\n                    </BrowserRouter>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\reportWebVitals.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\Settings.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\ProtectedRoute.js",["168"],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\StudySession.js",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186"],"import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport './StudySession.css';\r\nimport AreaRechartComponent from \"./AreaRechartComponent\";\r\nimport ScrollToTop from \"./ScrollToTop/ScrollToTop\";\r\n\r\n// Notify user with short messages\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport authHeader from \"./services/authheader\";\r\n\r\nconst baseURL = \"http://localhost:8080\"\r\n\r\n\r\nclass StudySession extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Update input title to state.currentTitle\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.state = {\r\n            inform_notifications_every_sec: 30000, // every x seconds check for notifications and inform the user\r\n            session_ongoing: 0, // Boolean: is there a current session ongoing? then do not show delete button\r\n            ongoing_session_id: \"\",\r\n            currentTitle: \"\", // currentTitle to be set by the user -> will be pushed to the backend as session_name when creating a new session\r\n            //How our sessions are structured:\r\n            sessions: [\r\n                {\r\n                    session_id: 1, // Every session has an unique ID\r\n                    session_name: \"Name of Session\", // Name of the session\r\n                    session_start: \"20.12.2021\", // date and time the session started\r\n                    session_end: \"21.12.2021\", // date and time the session stopped\r\n                    session_breakTime: \"21.12.2021\", // date and time when the next break is\r\n                    session_duration: 7, // date and time between start and end\r\n                    session_stopped: 0 // true if the session was stopped, false if it is still ongoing\r\n                }\r\n            ],\r\n\r\n            // Will be updated by the server and received from the backend with a get every x seconds\r\n            list_of_notifications:{\r\n                open_window: false,\r\n                make_break: false,\r\n                alarm_humidity_wrong: false,\r\n                air_quality_wrong: false,\r\n                alarm_temperature_cold: false,\r\n                alarm_temperature_hot: false,\r\n            },\r\n\r\n            currentCO2: \"\",\r\n            currentTemp: \"\",\r\n            avgCO2:\"example\",\r\n            avgTemp:\"example\",\r\n\r\n            allSessionsTemp:[], //list of all temp measurements (all sessions)\r\n            allSessionsCO2: [], //list of all co2 measurements (all sessions)\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        //get current measurements\r\n        await this.getMeasurements()\r\n\r\n        // Update notifications every x seconds\r\n        await this.checkNotificationsHandler()\r\n        this.mySecondInterval = setInterval(this.checkNotificationsHandler, this.state.inform_notifications_every_sec)\r\n\r\n        // Get all sessions from backend\r\n        await axios.get(baseURL+\"/session/\",{ headers: authHeader() }).then((res) =>{\r\n            let data = res.data\r\n            this.setState({sessions: data.reverse()})\r\n\r\n            // check if a session is ongoing\r\n            if(this.state.sessions.length > 0){\r\n                if (this.state.sessions[this.state.sessions.length-1].session_stopped){\r\n                    this.setState({\r\n                        session_ongoing: 0,\r\n                    })\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        session_ongoing: 1,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.myInterval);\r\n        clearInterval(this.mySecondInterval);\r\n    }\r\n\r\n    // Input user for title of a session\r\n    handleChange(event) {\r\n        event.preventDefault()\r\n        this.setState({currentTitle: event.target.value});\r\n    }\r\n\r\n    // Creates Session and increments number of session and ongoing session will be true\r\n    createSessionHandler = async (e)=>{\r\n\r\n        //start interval for updating current measurements\r\n        this.myInterval = setInterval(this.getMeasurements,10000)//every 10 seconds\r\n\r\n        e.preventDefault()\r\n\r\n        let new_session = {\r\n            session_id: this.state.sessions.length,\r\n            session_name: this.state.currentTitle,\r\n            session_stopped: 0,\r\n            //session_breakTime: 0,\r\n        }\r\n\r\n        // Send creation of session to backend and get the session_start of the backend\r\n        console.log(\"This data will be sent to the backend: \", new_session)\r\n        await axios.post(baseURL+'/session/', new_session, { headers: authHeader() })\r\n             .then(resp => {\r\n                 console.log(\"create Session respond:\", resp)\r\n                 new_session[\"session_start\"] = resp[\"data\"][\"session_start\"]\r\n                 if (resp.status !== 200) {\r\n                     throw new Error(`Request failed: ${resp.status}`);\r\n                 }\r\n             })\r\n             .catch(err => {\r\n                 console.log(err.response);\r\n             })\r\n\r\n        // Add the created session to the list of sessions\r\n         let sessions = [new_session, ...this.state.sessions]\r\n\r\n        // Change session ongoing to true\r\n        await this.setState({\r\n            session_ongoing: 1,\r\n        })\r\n\r\n        await this.setState({ongoing_session_id: new_session.session_id})\r\n        await this.getMeasurements()\r\n        await this.setState({sessions})\r\n        console.log(\"State after created session: \",this.state)\r\n    }\r\n\r\n    // Stop the current session and get the session_end time from the backend and save it in the last session\r\n    stopSessionHandler = async (e)=>{\r\n        e.preventDefault()\r\n        let sessions\r\n\r\n        await axios.post(baseURL+'/session/stop/', {},{ headers: authHeader() })\r\n            .then(resp => {\r\n                 sessions = this.state.sessions.map(session => (\r\n                    session.session_id===this.state.sessions.length-1 ? {...session, session_end: resp[\"data\"][\"session_end\"], session_stopped: 1}: session\r\n\r\n            ))\r\n                console.log(\"sessions after stopped\", this.state)\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n\r\n        //get measurements\r\n        await this.getMeasurements()\r\n\r\n        //get session with id\r\n        let newSession = await this.getSessionById(sessions[0].session_id)\r\n        sessions[0]=newSession\r\n        await this.setState({\r\n            session_ongoing: 0,\r\n        })\r\n\r\n        // Set new sessions\r\n        await this.setState({ sessions });\r\n\r\n        clearInterval(this.myInterval); //stop interval for updating current measurements\r\n    }\r\n\r\n    //get the session with the id\r\n    getSessionById = async (id) => {\r\n        let session = \"\"\r\n        await axios.get(baseURL + /session/+id, {headers: authHeader()}).then((res) => {\r\n            let data = res.data\r\n            session = data\r\n        })\r\n\r\n        return session\r\n    }\r\n\r\n    getMeasurements = async () => {\r\n        //get CO2 for all sessions and store it, so it can be used for area chart\r\n        await axios.get(baseURL + \"/CO2/\",{ headers: authHeader() }).then((res) => {\r\n            let data = res.data\r\n            console.log(\"DATA CO2: \", data)\r\n\r\n            //dictionary will then be stored in allSessionsCO2. As format for area chart\r\n            let newDict = []\r\n\r\n            //iterate over whole data to get key (id of session) and value (list of all CO2 measurements)\r\n            Object.entries(data).length > 0 &&\r\n            Object.entries(data).map(([key, value]) => {\r\n                //array to store each dict of one session which is used for area chart: name and CO2\r\n                let array = []\r\n                //console.log(key, value)\r\n                Object.entries(value).map(([index, oneMeasure]) => {\r\n                    array.push(\r\n                        {\r\n                            name: \"\",\r\n                            CO2: oneMeasure,\r\n                        }\r\n                    )\r\n                })\r\n                //add each session to the new dictionary\r\n                newDict.push({\r\n                    id: key,\r\n                    measurements: array\r\n                })\r\n            })\r\n\r\n            //set state to the new dictionary\r\n            this.setState({allSessionsCO2: newDict})\r\n        })\r\n\r\n        //same as above but for temp: get temp for all sessions and store it, so it can be used for area chart\r\n        await axios.get(baseURL + \"/temp/\",{ headers: authHeader() }).then((res) => {\r\n            let data = res.data\r\n            console.log(\"DATA TEMP\", data)\r\n\r\n            //dictionary will then be stored in allSessionsTemp. As format for area chart\r\n            let newDict = []\r\n\r\n            //iterate over whole data to get key (nid of session) and value (list of all temp measurements)\r\n            Object.entries(data).length > 0 &&\r\n            Object.entries(data).map(([key, value]) => {\r\n                //array to store each dict of one session which is used for area chart: name and temp\r\n                let array = []\r\n                Object.entries(value).map(([index, oneMeasure]) => {\r\n                    array.push(\r\n                        {\r\n                            name: \"\",\r\n                            Temperature: oneMeasure,\r\n\r\n                        }\r\n                    )\r\n                })\r\n                //add each session to the new dictionary\r\n                newDict.push({\r\n                    id: key,\r\n                    measurements: array\r\n                })\r\n            })\r\n\r\n            //set state to the new dictionary\r\n            this.setState({allSessionsTemp: newDict})\r\n\r\n        })\r\n\r\n    }\r\n\r\n    // Deletes all sessions after clicking the delete button\r\n    deleteSessionHandler = async (e) => {\r\n        e.preventDefault()\r\n        let sessions = []\r\n        this.setState({sessions})\r\n        axios.delete(baseURL + '/session/',{ headers: authHeader() })\r\n            .then(resp => {\r\n                if (resp.status !== 200) {\r\n                    throw new Error(`Request failed: ${resp.status}`);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n            })\r\n        await this.getMeasurements()\r\n\r\n    }\r\n\r\n    // Check all 30 seconds the state of notifications and informs the user with toast\r\n    checkNotificationsHandler = async () => {\r\n\r\n        // Get all notifications from backend\r\n        await axios.get(baseURL+\"/session/check/\",{ headers: authHeader() }).then((res) =>{\r\n            let data = res.data\r\n            // Overwrite the notification values from the backend\r\n            this.setState({list_of_notifications: data})\r\n        })\r\n\r\n        // Check notifications and alarm the user\r\n        if (this.state.list_of_notifications.make_break){\r\n            toast.warning('You need a break! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, make_break: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.open_window){\r\n            toast.warning('You need to open the window! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, open_window: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.air_quality_wrong){\r\n            toast.warning('You need to open the window since the air quality is bad! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, air_quality_wrong: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_humidity_wrong){\r\n            toast.warning('You need to open the window since the humidity is bad! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_humidity_wrong: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_temperature_cold){\r\n            toast.warning('It is colder than the limited set in settings! Turn on the heating! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_temperature_cold: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n        if (this.state.list_of_notifications.alarm_temperature_hot){\r\n            toast.warning('It is colder than the limited set in settings! Turn off the heating or open the window! ')\r\n            const list_of_notifications = {...this.state.list_of_notifications, alarm_temperature_hot: false}\r\n            this.setState({list_of_notifications})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        // List of all sessions completed\r\n            let sessionsList = this.state.sessions.map(session => {\r\n                if (session.session_stopped) {\r\n\r\n                    //iterate to find temp measurements of the right id\r\n                    let sessionMeasTemp = null\r\n                    this.state.allSessionsTemp.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasTemp = entry.measurements\r\n                        }\r\n                    })\r\n\r\n                    //iterate to find co2 measurements of the right id\r\n                    let sessionMeasCO2 = null\r\n                    this.state.allSessionsCO2.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasCO2 = entry.measurements\r\n                            sessionMeasCO2 = entry.measurements\r\n                        }\r\n                    })\r\n\r\n                       return (\r\n                        <div key={session.session_id}>\r\n                            <div className={\"sessionElem\"}>\r\n                                <p><b>{session.session_name}</b> | <b>Session ID:</b> {session.session_id} </p> <p><b>Session\r\n                                    Start:</b> {session.session_start} | <b>Session End:</b> {session.session_end}</p>\r\n                                <p><b>Average Temperature: </b>{session.average_temp.toFixed(1)}° C | <b>Average CO<sub>2</sub>: </b>{session.average_co2.toFixed(1)} CO<sub>2</sub>e</p>\r\n                                {/*| <b>Session Duartion:</b> {session.session_end - session.session_start)}</p>*/}\r\n                                {sessionMeasTemp == null ? \"\" : <AreaRechartComponent type={\"Temperature\"}\r\n                                                                                data={sessionMeasTemp}></AreaRechartComponent>}\r\n                                {sessionMeasCO2 == null ? \"\" : <AreaRechartComponent type={\"CO2\"}\r\n                                                                                  data={sessionMeasCO2}></AreaRechartComponent>}\r\n\r\n                                {/* <AreaRechartComponent type={\"CO2\"}8148f3b4c0ed\r\n                                                  data={this.state.allSessionsCO2[session.session_id][session.session_name]}></AreaRechartComponent>*/}\r\n                            </div>\r\n                        </div>\r\n\r\n                    )\r\n                }\r\n            })\r\n            // List of current active session\r\n            let currentSession = this.state.sessions.map(session => {\r\n                if (!session.session_stopped){\r\n\r\n                    //iterate to find temp measurements of the right id\r\n                    let sessionMeasTemp = []\r\n                    this.state.allSessionsTemp.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasTemp = entry.measurements\r\n                        }\r\n                    })\r\n\r\n                    //iterate to find co2 measurements of the right id\r\n                    let sessionMeasCO2 = []\r\n                    this.state.allSessionsCO2.map(entry => {\r\n                        if (entry.id == session.session_id) {\r\n                            sessionMeasCO2 = entry.measurements\r\n                        }\r\n                    })\r\n\r\n                    //show ongoing session data\r\n                    return (\r\n                        <div key={session.session_id}>\r\n                            <p><b>{session.session_name}</b> | <b>Session ID:</b> {session.session_id} </p> <p><b>Session\r\n                                Start:</b> {session.session_start}</p>\r\n                            {this.state.sessions.length!=0&&sessionMeasTemp.length!=0?<p><b>Current Temperature:</b> {sessionMeasTemp[sessionMeasTemp.length-1].Temperature}° C</p>:<p><b>Current Temp:</b> Not measured yet</p>}\r\n                            {this.state.sessions.length!=0&&sessionMeasCO2.length!=0?<p><b>Current CO<sub>2</sub>:</b> {sessionMeasCO2[sessionMeasCO2.length-1].CO2} CO<sub>2</sub>e</p>:<p><b>Current CO<sub>2</sub>:</b> Not measured yet</p>}\r\n                        </div>\r\n\r\n                    )}\r\n            })\r\n\r\n            return (\r\n             <div>\r\n                 <ToastContainer autoClose={false} limit={1} position=\"top-center\"/>\r\n                    <div className={\"backgroundStudySession\"}>\r\n                        <div className={\"elem\"}>\r\n                            <h1>STUDY SESSION</h1>\r\n                            <h2>Current study sessions: </h2>\r\n                            {\r\n                                <form>\r\n                                    <label>\r\n                                        <b>Name: </b>\r\n                                        <input type=\"text\" placeholder={\"Enter an optional name\"}\r\n                                               onKeyPress={(e) => {\r\n                                                   e.key === 'Enter' && e.preventDefault();\r\n                                               }} value={this.state.currentTitle} onChange={this.handleChange}/>\r\n                                    </label>\r\n                                </form>\r\n                            }\r\n                            {this.state.session_ongoing !== 1 ?\r\n                                <button className={\"button\"} onClick={this.createSessionHandler}>Create New Session</button>\r\n                                : <button  className={\"button\"} onClick={this.stopSessionHandler}>Stop Session</button>}\r\n\r\n                            {currentSession}\r\n                            <p></p>\r\n\r\n                            {(this.state.sessions.length > 0) && (this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0) &&\r\n                            <h2>Past study sessions: </h2>}\r\n                            {(this.state.sessions.length > 0) && (!this.state.session_ongoing) && (this.state.sessions[this.state.sessions.length - 1].session_stopped !== 0) &&\r\n                            <button  className={\"button\"}  onClick={this.deleteSessionHandler}>Delete all Sessions</button>}\r\n\r\n                            {sessionsList}\r\n                        </div>\r\n                    </div>\r\n                    <ScrollToTop></ScrollToTop>\r\n                </div>\r\n\r\n            )\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default StudySession;","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\NavBar\\Nav.js",["187","188","189","190","191"],"import React, {Component} from 'react';\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport './Nav.css';\r\nimport Authservice from \"../services/Authservice\";\r\n\r\nclass Nav extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state={\r\n            user: undefined,\r\n        }\r\n    }\r\n\r\n    //get current user\r\n    componentDidMount() {\r\n        this.setState({user: localStorage.getItem('user')})\r\n    }\r\n\r\n    //logout when clicking on logout button\r\n    logout = () =>{\r\n        Authservice.logout();\r\n        this.setState({user: undefined});\r\n\r\n    }\r\n\r\n    render(){\r\n       let user =localStorage.getItem(\"user\")\r\n\r\n        return(\r\n            <nav className={\"NavbarItems\"}>\r\n                <Link to=\"/studysession\" style={{ textDecoration: 'none', justifyContent:'center' }}><h1 className={\" navbar-logo\"}>MMI </h1></Link>\r\n\r\n                <div className={'nav-menu'}>\r\n                    {user!=undefined?<Link to={\"/studysession\"}>\r\n                        <button className={\"button\"}>\r\n                            Study session\r\n                        </button>\r\n                    </Link>:\"\"}\r\n                    {user!=undefined?<Link to=\"/settings\">\r\n                        <button className={\"button\"}>\r\n                            Settings\r\n                        </button>\r\n                    </Link>:\"\"}\r\n                    {user!=undefined? <Link to=\"/login\">\r\n                        <button className={\"button\"} onClick={this.logout}>\r\n                            Logout\r\n                        </button>\r\n                    </Link>:<Link to=\"/login\">\r\n                        <button className={\"button\"}>\r\n                            Login\r\n                        </button>\r\n                    </Link>}\r\n                    {user==undefined?<Link to=\"/signup\">\r\n                        <button className={\"button\"}>\r\n                            Signup\r\n                        </button>\r\n                    </Link>:\"\"}\r\n\r\n\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Nav;","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\Login\\Folders.js",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\r\nimport './button.css';\r\nimport word from './word.png'; // with import\r\nimport folderImage from './folderImage.png'; // with import\r\n\r\n\r\n/* TODO:\r\n- When the user looks at the destination folder, it gets highlighted to improve the selection\r\n- add log\r\n- show selected folder only for second test and also disable hover\r\n- if move item 1 from folder 1 and then want to move item 2 from folder 1 (same start folder), it moves still item 1\r\n\r\nInfo\r\n- browser sometimes after a while does not show camera anymore, close all apps using cameras and browser and restart\r\n */\r\n\r\n\r\n// global webgazer in order to have only one and saving data in a global value\r\nconst webgazer=window.webgazer\r\nlet dataXY = {x: 0, y: 0}\r\nlet diffXMousePoint = 0\r\nlet diffYMousePoint = 0\r\nlet FolderPath = \"HOME/DOCUMENTS/\"\r\nlet startTime\r\nlet endTime\r\nlet totalTimeTest1 = 0 // and two\r\n\r\nlet startTestTime\r\n\r\nlet numberTimesClickedFolder = 0\r\nlet startTimeClickedFolder1\r\nlet endTimeClickedFolder2\r\nlet totalTimeClickingFolders = 0\r\n\r\n\r\n// Item in list generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}-${new Date().getTime()}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\nconst grid = 8;\r\n\r\n// Style of Files\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: \"none\",\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n    maxWidth: \"100px\",\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? \"lightgreen\" : \"white\",\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\n// Style of the Folders (Here change to activate the folders/list when user selects the destination folder???)\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? \"lightblue\" : \"white\",\r\n    padding: grid,\r\n    border: '1px solid rgba(0, 0, 0, 10)',\r\n    width: 250,\r\n    flex:1,\r\n    flexDirection:'row',\r\n    alignItems:'left',\r\n    justifyContent:'left'\r\n\r\n});\r\n\r\n// Function to run Webgazer and folder states\r\nfunction QuoteApp() {\r\n    const [state, setState] = useState([getItems(5) ]);//, getItems(5, 10), getItems(5, 15), getItems(5, 20)]);\r\n    const [state2, setState2] = useState([getItems(10) ]);//, getItems(5, 10), getItems(5, 15), getItems(5, 20)]);\r\n\r\n    let [showBox, setShowBox] = useState(false)\r\n    const [showItemName, setItemName] = useState(\"Item not selected\");\r\n    let [isDraggingOverFolder, setIsDragging] = useState(false);\r\n\r\n    let [disable, setDisable] = React.useState(false);\r\n    let [disableFinish, setDisableFinish] = React.useState(false);\r\n\r\n    let [myArray, setMyArray] = useState([\"HOME\"]);\r\n\r\n    //  index: row, droppableId = Column\r\n    const [sourceDroppableId, setsourceDroppableId] = useState(-1)\r\n    const [sourceIndex, setsourceIndex] = useState(-1)\r\n\r\n    // Lines which separate the folders in order to detect which folder is in the eye gazing field\r\n    let beforeLineBelongsF1 = window.innerWidth/100*80/4 + window.innerWidth/10 // Folder 1\r\n    let beforeLineBelongsF2 = window.innerWidth/100*80/4*2 + window.innerWidth/10 // Folder 2\r\n    let beforeLineBelongsF3 = window.innerWidth/100*80/4*3 + window.innerWidth/10 // Folder 3\r\n\r\n    // Eye Gazing Code ////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    useEffect(()=>{\r\n        // only start the eye gazing once at the beginning until one item was clicked\r\n        // if(sourceDroppableId < 0){\r\n        //     webgazer.setGazeListener((data,clock)=>{\r\n        //         //console.log(data)\r\n        //         if((typeof data === \"null\")|| (typeof data === \"null\")){\r\n        //             dataXY = {x: 0, y: 0}\r\n        //         }\r\n        //         else{\r\n        //             dataXY = data\r\n        //             // setInterval(Greeting(dataXY), 1);\r\n        //         }\r\n        //     }).begin()\r\n        // }\r\n\r\n        // check if key B pressed to allow the dropping process\r\n        document.addEventListener('keydown', function(event){\r\n\r\n                if (event.keyCode == 66 && sourceDroppableId >= 0 ) { // 32 = space, 66 = b\r\n\r\n                    //webgazer.pause();\r\n                    // Index = row, droppableId = column = nr folder\r\n                    // The clicked one solved as source\r\n                    let source = {droppableId: sourceDroppableId, index: sourceIndex}\r\n                    // console.log(\"Source saved in result \")\r\n                    // console.log(source)\r\n\r\n                    // if folder nr. 1 selected: droppableId = 0\r\n                    if (dataXY.x < beforeLineBelongsF1){ //&& robotPress\r\n                        console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 0\")\r\n                        let destination = {droppableId: 0, index: state[0].length}\r\n                        let result = { source, destination }\r\n                        onDragEnd(result)\r\n                        // move(state[source], state[0], source, destination) (droppableId)\r\n                    }\r\n                    // if folder nr. 2 selected: droppableId = 1\r\n                    else if (dataXY.x < beforeLineBelongsF2){\r\n                        console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 1\")\r\n                        let destination = {droppableId: 1, index: state[1].length}\r\n                        let result = { source, destination }\r\n                        onDragEnd(result)\r\n                    }\r\n                    // if folder nr. 3 selected: droppableId = 2\r\n                    else if (dataXY.x < beforeLineBelongsF3){\r\n                        console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 2\")\r\n                        let destination = {droppableId: 2, index: state[2].length}\r\n                        let result = { source, destination }\r\n                        onDragEnd(result)\r\n                    }\r\n                    // if folder nr. 4 selected: droppableId = 3\r\n                    else if (dataXY.x >= beforeLineBelongsF3){\r\n                        console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 3\")\r\n                        let destination = {droppableId: 3, index: state[3].length}\r\n                        let result = { source, destination }\r\n                        onDragEnd(result)\r\n                    }\r\n                    setShowBox(false)\r\n\r\n                    endTime = performance.now()\r\n                    let usedTime = (endTime - startTime)\r\n                    console.log(\"Test 2: Dragged Item and used Eye Gazer and had: \" + usedTime + \" milliseconds\")\r\n                    totalTimeTest1 = totalTimeClickingFolders + usedTime\r\n                    console.log(\"Totally used time for test 2: \" + totalTimeTest1)\r\n\r\n                    //webgazer.resume();\r\n                }\r\n            }\r\n        )\r\n\r\n    }, [sourceDroppableId]);\r\n\r\n    // Moves item to folder\r\n    function onDragEnd(result) {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n        const sInd = +source.droppableId;\r\n        const dInd = +destination.droppableId;\r\n\r\n        if (sInd === dInd) {\r\n            const items = reorder(state[sInd], source.index, destination.index);\r\n            const newState = [...state];\r\n            newState[sInd] = items;\r\n            setState(newState);\r\n        } else {\r\n            const result = move(state[sInd], state[dInd], source, destination);\r\n            const newState = [...state];\r\n            newState[sInd] = result[sInd];\r\n            newState[dInd] = result[dInd];\r\n\r\n            setState(newState.filter(group => group.length));\r\n        }\r\n\r\n    }\r\n\r\n    // To enable hovering over folder and opening/adding new folder to the right\r\n    async function UserGreeting()  {\r\n        if(isDraggingOverFolder){\r\n            await setState([...state, getItems(5, 0)])\r\n            setIsDragging(false)\r\n            endTime = performance.now()\r\n            let usedTime = (endTime - startTime)\r\n            console.log(\"Dragged Item and Hovered over folder and had: \" + usedTime + \" milliseconds\")\r\n            totalTimeTest1 = totalTimeTest1 + usedTime\r\n            console.log(\"Totally used Dragging time for test 1: \" + totalTimeTest1)\r\n        }\r\n\r\n    }\r\n\r\n    // Outputes the name of the user\r\n    const handleMobile=(text)=>{\r\n        console.log(text);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div  style={{ color: \"lightgreen\" }}>\r\n                <h1>TEST 1: Drag and Drop</h1>\r\n                <p>Thank you for taking your time. Here is the first task with the goal to move the item 2 to the folder 6.\r\n                    Please read the instructions carefully before you start:</p>\r\n                <form>\r\n                    <label>\r\n                        1. Enter your Name:\r\n\r\n                        <input type=\"text\" name=\"name\" onChange={(event)=>{handleMobile(event.target.value)}}   onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                        />\r\n                    </label>\r\n                </form>\r\n                <p>2. Click on START TEST 1 and Drag and Drop the item 2 into the corresponding folders (alternately the upper one then below one). Start by dragging the item 2 over the Folder NR. 0</p>\r\n                <p>3. Drag and Drop the new item 2 into the BELOW folder nr. 1 </p>\r\n                <p>4. Drag and Drop the new item 2 into the ABOVE Folder NR. 2 and so on till it is in the folder 6.</p>\r\n                <p>5. Stop the test by pressing on the END TEST 1 Button</p>\r\n                <br></br>\r\n                {disableFinish && <p>\r\n                    <p>6. Right Click with the mouse on the website and click on inspect to go to CONSOLE OR</p>\r\n                    <p>7. To open the developer console window on Chrome, use the keyboard shortcut Control-Shift-J on Windows or Cmd-Option-J on a Mac</p>\r\n                    <p>8. Go to CONSOLE and make a screenshot of the output and save it in order that you can later upload it on the google form after the second task.</p>\r\n                    <p>9. Do the eye gazer test 2 by clicking on <a className='a' target=\"_blank\" href={\"https://drag-and-drop-c9785.web.app/gazer\"}> https://drag-and-drop-c9785.web.app/gazer</a> </p>\r\n                </p>  }\r\n                <br></br>\r\n                <button\r\n                    disabled={disable}\r\n                    onClick={() => {\r\n                        startTestTime = performance.now()\r\n                        setDisable(true)\r\n                    }}\r\n                >START TEST 1</button>\r\n\r\n                {disable &&\r\n                <button\r\n                    disabled={disableFinish}\r\n                    onClick={() => {\r\n                        let endTestTime1 = performance.now()\r\n                        console.log(\"Finished Test 1 and used: \" + (endTestTime1-startTestTime))\r\n                        //setDisable(false)\r\n                        setDisableFinish(true)\r\n\r\n                    }}>\r\n                    END TEST 1</button> }\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n\r\n\r\n            <MouseTooltip\r\n                visible={false} // test 1 no selected item showing\r\n                offsetX={15}\r\n                offsetY={15}\r\n            >\r\n                <div\r\n                    // onMouseMove={onMouseMove}\r\n\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        background: \"grey\",\r\n                        border: '1px solid rgba(0, 0, 0, 10)',\r\n                        padding: 5,\r\n\r\n                    }}\r\n                >\r\n                    {\r\n                        showItemName\r\n                    }\r\n                </div>\r\n            </MouseTooltip>\r\n\r\n            <div style={{ display: \"flex\" }}>\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    {state.map((el, ind) => (\r\n                        <Droppable  key={ind} droppableId={`${ind}`}>\r\n\r\n                            {(provided, snapshot) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(snapshot.isDraggingOver)}\r\n                                    {...provided.droppableProps}\r\n                                    align=\"left\"\r\n                                >\r\n                                    <p>\r\n                                        <b> {myArray[ind]} </b>\r\n                                        {/*HOME\\DOCUMENTS\\Folder NR.*/}\r\n                                    </p>\r\n                                    <br></br>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        // style={{\r\n                                        //     maxWidth: \"285px\",\r\n                                        //     maxHeight: \"50px\",\r\n                                        //     minWidth: \"285px\",\r\n                                        //     minHeight: \"50px\",\r\n                                        //     marginBottom: \"8px\"\r\n                                        // }}\r\n                                        onMouseOver={() => {\r\n                                            if(isDraggingOverFolder){\r\n                                                let nextArray = myArray[ind] + \"/\" + (ind)\r\n                                                setMyArray(oldArray => [...oldArray, nextArray])\r\n                                            }\r\n                                            UserGreeting()\r\n                                        }}\r\n                                        onClick={() => {\r\n                                            setState([...state, getItems(5)]);\r\n                                            numberTimesClickedFolder = numberTimesClickedFolder + 1\r\n                                            console.log(\"Second Test: Clicked on Folder Nr. \" + (ind))\r\n\r\n                                            if (numberTimesClickedFolder === 1){\r\n                                                startTimeClickedFolder1 = performance.now()\r\n                                            } else if (numberTimesClickedFolder === 7){\r\n                                                endTimeClickedFolder2 = performance.now()\r\n                                                totalTimeClickingFolders = endTimeClickedFolder2-startTimeClickedFolder1\r\n                                                console.log(\"Test 2: Used time to click/open three folders: \" + (totalTimeClickingFolders))\r\n                                            }\r\n                                            // {FolderPath = FolderPath + \"Folder NR.\" +  {ind} + \"/\"}\r\n                                        }}\r\n                                    >\r\n                                        <div className='rowC'>\r\n                                            <img  src={folderImage} width=\"50\" height=\"50\"/>\r\n                                            <div\r\n                                                style={{ marginTop: \"20px\", marginRight: \"5px\" }}\r\n                                            >\r\n                                                Folder NR. {ind} </div>\r\n                                        </div>\r\n\r\n                                    </button>\r\n\r\n\r\n                                    {el.map((item, index) => (\r\n                                        <Draggable\r\n                                            key={item.id}\r\n                                            draggableId={item.id}\r\n                                            index={index}\r\n                                        >\r\n\r\n                                            {(provided, snapshot) => (\r\n                                                <div\r\n\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps.style\r\n                                                    )}\r\n                                                >\r\n                                                    <div>\r\n                                                        <img src={word} width=\"20\" height=\"20\"/>\r\n                                                        {\" \" + item.content}\r\n                                                    </div>\r\n\r\n                                                    {snapshot.isDragging ? setsourceIndex(index) : ''}\r\n                                                    {snapshot.isDragging ? setsourceDroppableId(ind.toString()) : ''}\r\n\r\n                                                    {snapshot.isDragging ? setItemName(item.id.substr(0, 7) + \" selected\") : '' }\r\n                                                    <div style={{ color: \"lightgreen\" }}>{snapshot.isDragging ? (startTime = performance.now()) : \"\"  }</div>\r\n\r\n                                                    {(sourceIndex > 0 && !isDraggingOverFolder) ? (console.log(\"Is dragging item \" + sourceIndex  + \" from Folder Nr \" + (sourceDroppableId-1) + \" and started: \" + startTime)) : \"\"}\r\n                                                    {snapshot.isDragging ? setShowBox(true) : '' }\r\n                                                    {snapshot.isDragging ? setIsDragging(true) : false }\r\n\r\n                                                    <div\r\n                                                        style={{\r\n                                                            display: \"flex\",\r\n                                                            justifyContent: \"space-around\"\r\n                                                        }}\r\n                                                    >\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        // style={{\r\n                                        //     maxWidth: \"285px\",\r\n                                        //     maxHeight: \"50px\",\r\n                                        //     minWidth: \"285px\",\r\n                                        //     minHeight: \"50px\",\r\n                                        //     marginBottom: \"8px\"\r\n                                        // }}\r\n                                        onMouseOver={() => {\r\n                                            if(isDraggingOverFolder){\r\n                                                let nextArray = myArray[ind] + \"/\" + (ind)\r\n                                                setMyArray(oldArray => [...oldArray, nextArray])\r\n                                            }\r\n                                            UserGreeting()\r\n                                        }}\r\n\r\n                                        onClick={() => {\r\n                                            setState([...state, getItems(5)]);\r\n                                            numberTimesClickedFolder = numberTimesClickedFolder + 1\r\n                                            console.log(\"Second Test: Clicked on Folder Nr. 1 BELOW\")\r\n\r\n                                            if (numberTimesClickedFolder === 1){\r\n                                                startTimeClickedFolder1 = performance.now()\r\n                                            } else if (numberTimesClickedFolder === 3){\r\n                                                endTimeClickedFolder2 = performance.now()\r\n                                                totalTimeClickingFolders = endTimeClickedFolder2-startTimeClickedFolder1\r\n                                                console.log(\"Test 2: Used time to click/open three folders: \" + (totalTimeClickingFolders))\r\n                                            }                                        }}\r\n                                    >\r\n                                        <div className='rowC'>\r\n                                            <img  src={folderImage} width=\"50\" height=\"50\"/>\r\n                                            <div\r\n                                                style={{ marginTop: \"20px\", marginRight: \"5px\" }}\r\n                                            >\r\n                                                folder nr. {ind}</div>\r\n                                        </div>\r\n\r\n                                    </button>\r\n                                </div>\r\n\r\n                            )}\r\n                        </Droppable>\r\n                    ))}\r\n                </DragDropContext>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default function App() {\r\n\r\n    return (\r\n        <QuoteApp />\r\n    );\r\n}","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\Signup\\Signup.js",["211"],"import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport style from \"./Signup.css\"\r\nimport AuthService from \"../services/Authservice\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n//to make fields required\r\nconst required = value => {\r\n    if (!value) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                This field is required!\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n//verify username\r\nconst vusername = value => {\r\n    if (value.length < 3 || value.length > 20) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                The username must be between 3 and 20 characters.\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n//verify password\r\nconst vpassword = value => {\r\n    if (value.length < 6 || value.length > 40) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                The password must be between 6 and 40 characters.\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default class Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleRegister = this.handleRegister.bind(this);\r\n        this.onChangeUsername = this.onChangeUsername.bind(this);\r\n        this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            successful: false,\r\n            message: \"\"\r\n        };\r\n    }\r\n\r\n    //change username in state\r\n    onChangeUsername(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }\r\n\r\n    //change password in state\r\n    onChangePassword(e) {\r\n        this.setState({\r\n            password: e.target.value\r\n        });\r\n    }\r\n\r\n    //when clicking on signup\r\n    handleRegister(e) {\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            message: \"\",\r\n            successful: false\r\n        });\r\n\r\n        this.form.validateAll();\r\n\r\n        if (this.checkBtn.context._errors.length === 0) {\r\n            AuthService.register(\r\n                this.state.username,\r\n                this.state.password\r\n            ).then(\r\n                response => {\r\n                    this.setState({\r\n                        message: response.data.message,\r\n                        successful: true\r\n                    });\r\n\r\n                    //login right after signup\r\n                    AuthService.login(this.state.username, this.state.password).then(\r\n                        () => {\r\n                            this.props.history.push(\"/studysession\");\r\n                            window.location.reload();\r\n                        },\r\n                        error => {\r\n                            const resMessage =\r\n                                (error.response &&\r\n                                    error.response.data &&\r\n                                    error.response.data.message) ||\r\n                                error.message ||\r\n                                error.toString();\r\n\r\n                            this.setState({\r\n                                loading: false,\r\n                                message: resMessage\r\n                            });\r\n                        }\r\n                    );\r\n                },\r\n                error => {\r\n                    const resMessage =\r\n                        (error.response &&\r\n                            error.response.data &&\r\n                            error.response.data.message) ||\r\n                        error.message ||\r\n                        error.toString();\r\n\r\n                    this.setState({\r\n                        successful: false,\r\n                        message: resMessage\r\n                    });\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"textArea1\"}>\r\n                <div className={\"textArea2\"}>\r\n                    <div className=\"col-md-12\">\r\n                         <div className=\"card card-container\">\r\n                             <h1 className={\"LoginTitle\"}>Signup</h1>\r\n\r\n                            <Form\r\n                                onSubmit={this.handleRegister}\r\n                                ref={c => {\r\n                                    this.form = c;\r\n                                }}\r\n                            >\r\n                                {!this.state.successful && (\r\n                                    <div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"username\">Username</label>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                name=\"username\"\r\n                                                value={this.state.username}\r\n                                                onChange={this.onChangeUsername}\r\n                                                validations={[required, vusername]}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"password\">Password</label>\r\n                                            <Input\r\n                                                type=\"password\"\r\n                                                className=\"form-control\"\r\n                                                name=\"password\"\r\n                                                value={this.state.password}\r\n                                                onChange={this.onChangePassword}\r\n                                                validations={[required, vpassword]}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <button className=\"button\">Sign Up</button>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n\r\n                                {this.state.message && (\r\n                                    <div className=\"form-group\">\r\n                                        <div\r\n                                            className={\r\n                                                this.state.successful\r\n                                                    ? \"alert alert-success\"\r\n                                                    : \"alert alert-danger\"\r\n                                            }\r\n                                            role=\"alert\"\r\n                                        >\r\n                                            {this.state.message}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                <CheckButton\r\n                                    style={{ display: \"none\" }}\r\n                                    ref={c => {\r\n                                        this.checkBtn = c;\r\n                                    }}\r\n                                />\r\n                            </Form>\r\n                             <p className=\"mt-2\"> Already have an account? <Link to=\"/login\">Login</Link></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\common\\auth-verify.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\services\\Authservice.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\services\\authheader.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\RangeSlider.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\AreaRechartComponent.js",["212"],"import React from \"react\";\r\nimport {AreaChart, Area, YAxis, XAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\n\r\n//chart to show the measurements\r\nclass AreaRechartComponent extends React.Component {\r\n\r\n    data = this.props.data\r\n    type = this.props.type\r\n\r\n    render() {\r\n        return (\r\n            <ResponsiveContainer width=\"95%\" height={220}>\r\n                <AreaChart data={this.data}\r\n                           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\r\n                    <defs>\r\n                        <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor=\"rgba(220, 134, 108, 1)\" stopOpacity={0.8} />\r\n                            <stop offset=\"95%\" stopColor=\"rgba(220, 134, 108, 1)\" stopOpacity={0} />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor=\"rgba(220, 134, 108, 1)\" stopOpacity={0.8} />\r\n                            <stop offset=\"95%\" stopColor=\"rgba(220, 134, 108, 1)\" stopOpacity={0} />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    {this.type==\"Temperature\"?<Area type=\"monotone\" dataKey=\"Temperature\" stroke=\"rgba(158, 82, 75, 1)\" fillOpacity={1} fill=\"url(#colorUv)\" />\r\n                        :<Area type=\"monotone\" dataKey=\"CO2\" stroke=\"rgba(158, 82, 75, 1)\" fillOpacity={1} fill=\"url(#colorUv)\" />}\r\n\r\n                </AreaChart>\r\n            </ResponsiveContainer>\r\n\r\n        )\r\n    };\r\n}\r\n\r\nexport default AreaRechartComponent;","C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\ScrollToTop\\ScrollToTop.js",[],"C:\\Users\\pbuch\\Documents\\Master\\SecondSemester\\MMI\\dnd\\src\\components\\Login\\Gazer.js",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\r\nimport './button.css';\r\nimport word from './word.png'; // with import\r\nimport folderImage from './folderImage.png'; // with import\r\n\r\n\r\n/* TODO:\r\n- When the user looks at the destination folder, it gets highlighted to improve the selection\r\n- add log\r\n- show selected folder only for second test and also disable hover\r\n- if move item 1 from folder 1 and then want to move item 2 from folder 1 (same start folder), it moves still item 1\r\n\r\nInfo\r\n- browser sometimes after a while does not show camera anymore, close all apps using cameras and browser and restart\r\n */\r\n\r\n\r\n// global webgazer in order to have only one and saving data in a global value\r\nconst webgazer=window.webgazer\r\nlet dataXY = {x: 0, y: 0}\r\nlet diffXMousePoint = 0\r\nlet diffYMousePoint = 0\r\nlet FolderPath = \"HOME/DOCUMENTS/\"\r\nlet startTime\r\nlet endTime\r\nlet totalTimeTest1 = 0 // and two\r\n\r\nlet startTestTime\r\n\r\nlet numberTimesClickedFolder = 0\r\nlet startTimeClickedFolder1\r\nlet endTimeClickedFolder2\r\nlet totalTimeClickingFolders = 0\r\n\r\n\r\n// Item in list generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}-${new Date().getTime()}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\nconst grid = 8;\r\n\r\n// Style of Files\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: \"none\",\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n        maxWidth: \"100px\",\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? \"lightgreen\" : \"white\",\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\n// Style of the Folders (Here change to activate the folders/list when user selects the destination folder???)\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? \"lightblue\" : \"white\",\r\n    padding: grid,\r\n    border: '1px solid rgba(0, 0, 0, 10)',\r\n    width: 250,\r\n    flex:1,\r\n    flexDirection:'row',\r\n    alignItems:'left',\r\n    justifyContent:'left'\r\n\r\n});\r\n\r\n// Function to run Webgazer and folder states\r\nfunction QuoteApp() {\r\n    let [state, setState] = useState([getItems(5) ]);//, getItems(5, 10), getItems(5, 15), getItems(5, 20)]);\r\n\r\n    let [showBox, setShowBox] = useState(false)\r\n    const [showItemName, setItemName] = useState(\"Item not selected\");\r\n    let [isDraggingOverFolder, setIsDragging] = useState(false);\r\n\r\n    let [disable, setDisable] = React.useState(false);\r\n    let [disableFinish, setDisableFinish] = React.useState(false);\r\n\r\n    let [myArray, setMyArray] = useState([\"HOME\"]);\r\n\r\n\r\n    //  index: row, droppableId = Column\r\n    const [sourceDroppableId, setsourceDroppableId] = useState(-1)\r\n    const [sourceIndex, setsourceIndex] = useState(-1)\r\n\r\n    // Lines which separate the folders in order to detect which folder is in the eye gazing field\r\n    // let beforeLineBelongsF1 = window.innerWidth/100*80/4 + window.innerWidth/10 // Folder 1\r\n    // let beforeLineBelongsF2 = window.innerWidth/100*80/4*2 + window.innerWidth/10 // Folder 2\r\n    // let beforeLineBelongsF3 = window.innerWidth/100*80/4*3 + window.innerWidth/10 // Folder 3\r\n\r\n    const divideByFolderAmount = 8\r\n    const percentWidthLeft = 14\r\n    const windowWidthLeft = window.innerWidth/100*percentWidthLeft\r\n    const windowMiddleWidthOneFolder = window.innerWidth/100*(100-(2*percentWidthLeft))/divideByFolderAmount\r\n    let beforeLineBelongsFM1 = windowWidthLeft + windowMiddleWidthOneFolder // Folder -1\r\n    let beforeLineBelongsF0 = windowWidthLeft + windowMiddleWidthOneFolder*2 // Folder 0\r\n    let beforeLineBelongsF1 = windowWidthLeft + windowMiddleWidthOneFolder*3// Folder 1\r\n\r\n    let beforeLineBelongsF2 = windowWidthLeft + windowMiddleWidthOneFolder*4 // Folder 2\r\n    let beforeLineBelongsF3 = windowWidthLeft + windowMiddleWidthOneFolder*5 // Folder 3\r\n    let beforeLineBelongsF4 = windowWidthLeft + windowMiddleWidthOneFolder*6 // Folder 4\r\n    let beforeLineBelongsF5 = windowWidthLeft + windowMiddleWidthOneFolder*7 // Folder 5\r\n\r\n    // Eye Gazing Code ////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    useEffect(()=>{\r\n        // only start the eye gazing once at the beginning until one item was clicked\r\n        if(sourceDroppableId < 0){\r\n            webgazer.setGazeListener((data,clock)=>{\r\n                //console.log(data)\r\n\t\t\t\tif((typeof data === \"null\")|| (typeof data === \"null\")){\r\n\t\t\t\t\tdataXY = {x: 0, y: 0}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t dataXY = data\r\n                    // setInterval(Greeting(dataXY), 1);\r\n                }\r\n            }).begin()\r\n        }\r\n\r\n        // check if key B pressed to allow the dropping process\r\n        document.addEventListener('keydown', function(event){\r\n\r\n            if (event.keyCode == 66 && sourceDroppableId >= 0 ) { // 32 = space, 66 = b\r\n\r\n                //webgazer.pause();\r\n                // Index = row, droppableId = column = nr folder\r\n                // The clicked one solved as source\r\n                let source = {droppableId: sourceDroppableId, index: sourceIndex}\r\n                // console.log(\"Source saved in result \")\r\n                // console.log(source)\r\n\r\n                // if folder nr. 1 selected: droppableId = 0\r\n                if (dataXY.x < beforeLineBelongsFM1){ //&& robotPress\r\n                    console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder -1\")\r\n                    let destination = {droppableId: 0, index: state[0].length}\r\n                    let result = { source, destination }\r\n                    onDragEnd(result)\r\n                    // move(state[source], state[0], source, destination) (droppableId)\r\n                }\r\n                // if folder nr. 2 selected: droppableId = 1\r\n                else if (dataXY.x < beforeLineBelongsF0 && dataXY.x > beforeLineBelongsFM1){\r\n                    console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 0\")\r\n                    let destination = {droppableId: 1, index: state[1].length}\r\n                    let result = { source, destination }\r\n                    onDragEnd(result)\r\n                }\r\n                // if folder nr. 3 selected: droppableId = 2\r\n                else if (dataXY.x < beforeLineBelongsF1 && dataXY.x > beforeLineBelongsF0){\r\n                    console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 1\")\r\n                    let destination = {droppableId: 2, index: state[2].length}\r\n                    let result = { source, destination }\r\n                    onDragEnd(result)\r\n                }\r\n                // if folder nr. 4 selected: droppableId = 3\r\n                else if (dataXY.x < beforeLineBelongsF2 && dataXY.x > beforeLineBelongsF1){\r\n                    console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 2\")\r\n                    let destination = {droppableId: 3, index: state[3].length}\r\n                    let result = { source, destination }\r\n                    onDragEnd(result)\r\n                }\r\n\r\n                // if folder nr. 1 selected: droppableId = 0\r\n                if (dataXY.x < beforeLineBelongsF3 && dataXY.x > beforeLineBelongsF2){ //&& robotPress\r\n                    console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 3\")\r\n                    let destination = {droppableId: 4, index: state[4].length}\r\n                    let result = { source, destination }\r\n                    onDragEnd(result)\r\n                    // move(state[source], state[0], source, destination) (droppableId)\r\n                }\r\n                // if folder nr. 2 selected: droppableId = 1\r\n                else if (dataXY.x < beforeLineBelongsF4 && dataXY.x > beforeLineBelongsF3){\r\n                    console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 4\")\r\n                    let destination = {droppableId: 5, index: state[5].length}\r\n                    let result = { source, destination }\r\n                    onDragEnd(result)\r\n                }\r\n                // if folder nr. 3 selected: droppableId = 2\r\n                else if (dataXY.x < beforeLineBelongsF5 && dataXY.x > beforeLineBelongsF4){\r\n                    console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 5\")\r\n                    let destination = {droppableId: 6, index: state[6].length}\r\n                    let result = { source, destination }\r\n                    onDragEnd(result)\r\n                }\r\n                // if folder nr. 4 selected: droppableId = 3\r\n                else if (dataXY.x >= beforeLineBelongsF5){\r\n                    console.log(\"Test 2: Dropped \" + \"item number \" + sourceIndex + \" from folder \" + sourceDroppableId +  \" by clicking B to folder 6\")\r\n                    let destination = {droppableId: 7, index: state[7].length}\r\n                    let result = { source, destination }\r\n                    onDragEnd(result)\r\n                }\r\n\r\n                setShowBox(false)\r\n\r\n                endTime = performance.now()\r\n                let usedTime = (endTime - startTime)\r\n                console.log(\"Test 2: Dragged Item and used Eye Gazer and had: \" + usedTime + \" milliseconds\")\r\n                totalTimeTest1 = totalTimeClickingFolders + usedTime\r\n                console.log(\"Totally used time for test 2: \" + totalTimeTest1)\r\n\r\n                //webgazer.resume();\r\n            }\r\n        }\r\n        )\r\n\r\n    }, [sourceDroppableId]);\r\n\r\n    // Moves item to folder\r\n    function onDragEnd(result) {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n        const sInd = +source.droppableId;\r\n        const dInd = +destination.droppableId;\r\n\r\n        if (sInd === dInd) {\r\n            const items = reorder(state[sInd], source.index, destination.index);\r\n            const newState = [...state];\r\n            newState[sInd] = items;\r\n            setState(newState);\r\n        } else {\r\n            const result = move(state[sInd], state[dInd], source, destination);\r\n            const newState = [...state];\r\n            newState[sInd] = result[sInd];\r\n            newState[dInd] = result[dInd];\r\n\r\n            setState(newState.filter(group => group.length));\r\n        }\r\n\r\n    }\r\n\r\n    // To enable hovering over folder and opening/adding new folder to the right\r\n    async function UserGreeting()  {\r\n        if(isDraggingOverFolder){\r\n            await setState([...state, getItems(sourceIndex+1, 0)])\r\n            setIsDragging(false)\r\n            endTime = performance.now()\r\n            let usedTime = (endTime - startTime)\r\n            console.log(\"Dragged Item and Hovered over folder and had: \" + usedTime + \" milliseconds\")\r\n            totalTimeTest1 = totalTimeTest1 + usedTime\r\n            console.log(\"Totally used time for test 1: \" + totalTimeTest1)\r\n        }\r\n    }\r\n\r\n    // Outputes the name of the user\r\n    const handleMobile=(text)=>{\r\n        console.log(text);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n        <div  style={{ color: \"lightgreen\" }}>\r\n            <h1>TEST 2: Drag and Drop with Eye Gazer</h1>\r\n            <p>Thank you again for taking your time. Here is the second task with the same goal to move the item 2 to the folder 2.\r\n                Please read the instructions carefully before you start:</p>\r\n            <br></br>\r\n\r\n            <p>Make sure you look in your camera and a green frame is around your face.</p>\r\n            <p>Calibrate the eye gazer (red dot): by moving with the mouse to the first upper corner on the left (above the PATH HOME) while looking at the mouse movement.\r\n                <p> and clicking 5 times with the mouse on the left corner.</p>\r\n               <p>Then move simultaneously with the mouse and your eyes to the upper right corner and click 5 times with the mouse on this corner. </p>\r\n                Then go to the under right corner and click it again 5 times with the mouse. Finally, go to the under left corner and do the same. Repeat the calibration one more time.</p>\r\n            <br></br>\r\n\r\n            <form>\r\n                <label>\r\n                    1. Enter your Name:\r\n\r\n                    <input type=\"text\" name=\"name\" onChange={(event)=>{handleMobile(event.target.value)}}   onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                    />\r\n                </label>\r\n            </form>\r\n\r\n            <p>2. Click on START TEST 2 and go to the folder NR. 6 by clicking on the folders (upper folder, below one, upper one, below one and so on): Folder NR. 0 -> folder nr. 1 (BELOW) -> Folder NR. 2 -> folder nr. 3 and so on</p>\r\n            <p>3. Select the item 2 by dragging it shortly. Look with the red dot to the folder NR. 6 and click on the key <b>b</b> when the red dot is inside this folder. The item 2 will be added to this folder</p>\r\n            <p>4. Stop the test 2 by pressing on the END TEST 2 Button</p>\r\n            <br></br>\r\n            {disableFinish && <p>\r\n                <p>5. Right Click with the mouse on the website and click on inspect to go to CONSOLE OR</p>\r\n                <p>To open the developer console window on Chrome, use the keyboard shortcut Control-Shift-J on Windows or Cmd-Option-J on a Mac</p>\r\n                <p>6. Make a screenshot of your whole screen including the output in the console and save it in order that you can later upload it on the google form below. </p>\r\n                <p>7. Please fill out and the upload the screenshots in the <a className='a' target=\"_blank\" href={\"https://forms.gle/Eb6fKaZYjue3V2Pw5\"}> google form</a> </p>\r\n            </p>  }\r\n            <br></br>\r\n            <button\r\n                disabled={disable}\r\n                onClick={() => {\r\n                    startTestTime = performance.now()\r\n                    setDisable(true)\r\n                }}\r\n            >START TEST 2</button>\r\n\r\n            {disable &&\r\n            <button\r\n                disabled={disableFinish}\r\n                onClick={() => {\r\n                    let endTestTime1 = performance.now()\r\n                    console.log(\"Finished Test 2 and used: \" + (endTestTime1-startTestTime))\r\n                    //setDisable(false)\r\n                    setDisableFinish(true)\r\n\r\n                }}>\r\n                END TEST 2</button> }\r\n        </div>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            {/*<div*/}\r\n            {/*    style={{*/}\r\n            {/*        position: \"absolute\",*/}\r\n            {/*        left: beforeLineBelongsF2,  // In Studysession margin left and right 10%*/}\r\n            {/*        top: window.innerHeight/2,*/}\r\n            {/*        background: \"lightgrey\",*/}\r\n            {/*        border: '1px solid rgba(0, 0, 0, 10)',*/}\r\n\r\n            {/*    }}*/}\r\n            {/*>*/}\r\n            {/*    GeeksforGeeks*/}\r\n            {/*</div>*/}\r\n\r\n            <MouseTooltip\r\n                visible={showBox}\r\n                offsetX={15}\r\n                offsetY={15}\r\n            >\r\n            <div\r\n\r\n\r\n                style={{\r\n                    position: \"absolute\",\r\n                    background: \"grey\",\r\n                    border: '1px solid rgba(0, 0, 0, 10)',\r\n                    padding: 5,\r\n\r\n                }}\r\n            >\r\n                {\r\n                    showItemName\r\n                }\r\n            </div>\r\n            </MouseTooltip>\r\n\r\n            <div style={{ display: \"flex\" }}>\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    {state.map((el, ind) => (\r\n                        <Droppable  key={ind} droppableId={`${ind}`}>\r\n\r\n                            {(provided, snapshot) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(snapshot.isDraggingOver)}\r\n                                    {...provided.droppableProps}\r\n                                    align=\"left\"\r\n                                >\r\n                                    <p>\r\n                                        <b> {myArray[ind]} </b>\r\n                                        {/*Folder NR. {ind-1}*/}\r\n                                         {/*HOME\\DOCUMENTS\\Folder NR.*/}\r\n                                    </p>\r\n                                    <br></br>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        // style={{\r\n                                        //     maxWidth: \"285px\",\r\n                                        //     maxHeight: \"50px\",\r\n                                        //     minWidth: \"285px\",\r\n                                        //     minHeight: \"50px\",\r\n                                        //     marginBottom: \"8px\"\r\n                                        // }}\r\n                                        // onMouseOver={UserGreeting}\r\n                                        onClick={() => {\r\n                                            setState([...state, getItems(5)]);\r\n                                            numberTimesClickedFolder = numberTimesClickedFolder + 1\r\n                                            console.log(\"Second Test: Clicked on Folder Nr. \" + (ind))\r\n\r\n                                            let nextArray = myArray[ind] + \"/\" + (ind)\r\n                                            setMyArray(oldArray => [...oldArray, nextArray])\r\n\r\n                                            if (numberTimesClickedFolder === 1){\r\n                                                startTimeClickedFolder1 = performance.now()\r\n                                            } else if (numberTimesClickedFolder === 7){\r\n                                                endTimeClickedFolder2 = performance.now()\r\n                                                totalTimeClickingFolders = endTimeClickedFolder2-startTimeClickedFolder1\r\n                                                console.log(\"Test 2: Used time to click/open three folders: \" + (totalTimeClickingFolders))\r\n                                            }\r\n                                            // {FolderPath = FolderPath + \"Folder NR.\" +  {ind} + \"/\"}\r\n                                        }}\r\n                                    >\r\n                                        <div className='rowC'>\r\n                                            <img  src={folderImage} width=\"50\" height=\"50\"/>\r\n                                            <div\r\n                                                style={{ marginTop: \"20px\", marginRight: \"5px\" }}\r\n                                            >\r\n                                                Folder NR. {ind} </div>\r\n                                        </div>\r\n\r\n                                    </button>\r\n\r\n\r\n                                    {el.map((item, index) => (\r\n                                        <Draggable\r\n                                            key={item.id}\r\n                                            draggableId={item.id}\r\n                                            index={index}\r\n                                        >\r\n\r\n                                            {(provided, snapshot) => (\r\n                                                <div\r\n\r\n                                                ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps.style\r\n                                                    )}\r\n                                                >\r\n                                                    <div>\r\n                                                    <img src={word} width=\"20\" height=\"20\"/>\r\n                                                    {\" \" + item.content}\r\n                                                    </div>\r\n\r\n                                                    {snapshot.isDragging ? setsourceIndex(index) : ''}\r\n                                                    {snapshot.isDragging ? setsourceDroppableId(ind.toString()) : ''}\r\n\r\n                                                    {snapshot.isDragging ? setItemName(item.id.substr(0, 7) + \" selected\") : '' }\r\n                                                    <div style={{ color: \"lightgreen\" }}>{snapshot.isDragging ? (startTime = performance.now()) : \"\"  }</div>\r\n\r\n                                                    {(sourceIndex > 0 && !isDraggingOverFolder) ? (console.log(\"Is dragging item \" + sourceIndex  + \" from Folder Nr \" + (sourceDroppableId-1) + \" and started: \" + startTime)) : \"\"}\r\n                                                    {snapshot.isDragging ? setShowBox(true) : '' }\r\n                                                    {snapshot.isDragging ? setIsDragging(true) : false }\r\n\r\n                                                    <div\r\n                                                        style={{\r\n                                                            display: \"flex\",\r\n                                                            justifyContent: \"space-around\"\r\n                                                        }}\r\n                                                    >\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        // style={{\r\n                                        //     maxWidth: \"285px\",\r\n                                        //     maxHeight: \"50px\",\r\n                                        //     minWidth: \"285px\",\r\n                                        //     minHeight: \"50px\",\r\n                                        //     marginBottom: \"8px\"\r\n                                        // }}\r\n                                        // onMouseOver={UserGreeting}\r\n                                        onClick={() => {\r\n                                            setState([...state, getItems(5)]);\r\n                                            numberTimesClickedFolder = numberTimesClickedFolder + 1\r\n                                            console.log(\"Second Test: Clicked on Folder Nr. 1 BELOW\")\r\n\r\n                                            let nextArray = myArray[ind] + \"/\" + (ind)\r\n                                            setMyArray(oldArray => [...oldArray, nextArray]);\r\n\r\n                                            if (numberTimesClickedFolder === 1){\r\n                                                startTimeClickedFolder1 = performance.now()\r\n                                            } else if (numberTimesClickedFolder === 3){\r\n                                                endTimeClickedFolder2 = performance.now()\r\n                                                totalTimeClickingFolders = endTimeClickedFolder2-startTimeClickedFolder1\r\n                                                console.log(\"Test 2: Used time to click/open three folders: \" + (totalTimeClickingFolders))\r\n                                            }                                        }}\r\n                                    >\r\n                                        <div className='rowC'>\r\n                                            <img  src={folderImage} width=\"50\" height=\"50\"/>\r\n                                            <div\r\n                                                style={{ marginTop: \"20px\", marginRight: \"5px\" }}\r\n                                            >\r\n                                                folder nr. {ind}</div>\r\n                                        </div>\r\n\r\n                                    </button>\r\n                                </div>\r\n\r\n                            )}\r\n                        </Droppable>\r\n                    ))}\r\n                </DragDropContext>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default function App() {\r\n\r\n    return (\r\n        <QuoteApp />\r\n    );\r\n}",{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","severity":1,"message":"240","line":2,"column":24,"nodeType":"241","messageId":"242","endLine":2,"endColumn":32},{"ruleId":"239","severity":1,"message":"243","line":2,"column":41,"nodeType":"241","messageId":"242","endLine":2,"endColumn":47},{"ruleId":"244","severity":1,"message":"245","line":204,"column":53,"nodeType":"246","messageId":"247","endLine":204,"endColumn":55},{"ruleId":"244","severity":1,"message":"245","line":208,"column":65,"nodeType":"246","messageId":"247","endLine":208,"endColumn":67},{"ruleId":"244","severity":1,"message":"245","line":237,"column":53,"nodeType":"246","messageId":"247","endLine":237,"endColumn":55},{"ruleId":"244","severity":1,"message":"245","line":240,"column":65,"nodeType":"246","messageId":"247","endLine":240,"endColumn":67},{"ruleId":"244","severity":1,"message":"248","line":327,"column":64,"nodeType":"246","messageId":"249","endLine":327,"endColumn":66},{"ruleId":"244","severity":1,"message":"245","line":332,"column":58,"nodeType":"246","messageId":"247","endLine":332,"endColumn":60},{"ruleId":"250","severity":1,"message":"251","line":333,"column":38,"nodeType":"252","messageId":"253","endLine":333,"endColumn":40},{"ruleId":"244","severity":1,"message":"245","line":340,"column":57,"nodeType":"246","messageId":"247","endLine":340,"endColumn":59},{"ruleId":"250","severity":1,"message":"251","line":341,"column":38,"nodeType":"252","messageId":"253","endLine":341,"endColumn":40},{"ruleId":"244","severity":1,"message":"248","line":368,"column":66,"nodeType":"246","messageId":"249","endLine":368,"endColumn":68},{"ruleId":"244","severity":1,"message":"245","line":373,"column":58,"nodeType":"246","messageId":"247","endLine":373,"endColumn":60},{"ruleId":"250","severity":1,"message":"251","line":374,"column":38,"nodeType":"252","messageId":"253","endLine":374,"endColumn":40},{"ruleId":"244","severity":1,"message":"245","line":381,"column":57,"nodeType":"246","messageId":"247","endLine":381,"endColumn":59},{"ruleId":"250","severity":1,"message":"251","line":382,"column":38,"nodeType":"252","messageId":"253","endLine":382,"endColumn":40},{"ruleId":"250","severity":1,"message":"254","line":392,"column":56,"nodeType":"252","messageId":"253","endLine":392,"endColumn":58},{"ruleId":"250","severity":1,"message":"254","line":392,"column":83,"nodeType":"252","messageId":"253","endLine":392,"endColumn":85},{"ruleId":"250","severity":1,"message":"254","line":393,"column":56,"nodeType":"252","messageId":"253","endLine":393,"endColumn":58},{"ruleId":"250","severity":1,"message":"254","line":393,"column":82,"nodeType":"252","messageId":"253","endLine":393,"endColumn":84},{"ruleId":"239","severity":1,"message":"255","line":2,"column":15,"nodeType":"241","messageId":"242","endLine":2,"endColumn":25},{"ruleId":"250","severity":1,"message":"254","line":35,"column":26,"nodeType":"252","messageId":"253","endLine":35,"endColumn":28},{"ruleId":"250","severity":1,"message":"254","line":40,"column":26,"nodeType":"252","messageId":"253","endLine":40,"endColumn":28},{"ruleId":"250","severity":1,"message":"254","line":45,"column":26,"nodeType":"252","messageId":"253","endLine":45,"endColumn":28},{"ruleId":"250","severity":1,"message":"251","line":54,"column":26,"nodeType":"252","messageId":"253","endLine":54,"endColumn":28},{"ruleId":"250","severity":1,"message":"251","line":30,"column":31,"nodeType":"252","messageId":"253","endLine":30,"endColumn":33},{"ruleId":"250","severity":1,"message":"254","line":6,"column":57,"nodeType":"252","messageId":"253","endLine":6,"endColumn":59},{"ruleId":"239","severity":1,"message":"256","line":5,"column":8,"nodeType":"241","messageId":"242","endLine":5,"endColumn":13},{"ruleId":"239","severity":1,"message":"256","line":7,"column":8,"nodeType":"241","messageId":"242","endLine":7,"endColumn":13},{"ruleId":"239","severity":1,"message":"240","line":2,"column":24,"nodeType":"241","messageId":"242","endLine":2,"endColumn":32},{"ruleId":"239","severity":1,"message":"243","line":2,"column":41,"nodeType":"241","messageId":"242","endLine":2,"endColumn":47},{"ruleId":"250","severity":1,"message":"254","line":6,"column":57,"nodeType":"252","messageId":"253","endLine":6,"endColumn":59},{"ruleId":"244","severity":1,"message":"245","line":204,"column":53,"nodeType":"246","messageId":"247","endLine":204,"endColumn":55},{"ruleId":"244","severity":1,"message":"245","line":208,"column":65,"nodeType":"246","messageId":"247","endLine":208,"endColumn":67},{"ruleId":"244","severity":1,"message":"245","line":237,"column":53,"nodeType":"246","messageId":"247","endLine":237,"endColumn":55},{"ruleId":"244","severity":1,"message":"245","line":240,"column":65,"nodeType":"246","messageId":"247","endLine":240,"endColumn":67},{"ruleId":"244","severity":1,"message":"248","line":327,"column":64,"nodeType":"246","messageId":"249","endLine":327,"endColumn":66},{"ruleId":"244","severity":1,"message":"245","line":332,"column":58,"nodeType":"246","messageId":"247","endLine":332,"endColumn":60},{"ruleId":"250","severity":1,"message":"251","line":333,"column":38,"nodeType":"252","messageId":"253","endLine":333,"endColumn":40},{"ruleId":"244","severity":1,"message":"245","line":340,"column":57,"nodeType":"246","messageId":"247","endLine":340,"endColumn":59},{"ruleId":"250","severity":1,"message":"251","line":341,"column":38,"nodeType":"252","messageId":"253","endLine":341,"endColumn":40},{"ruleId":"244","severity":1,"message":"248","line":368,"column":66,"nodeType":"246","messageId":"249","endLine":368,"endColumn":68},{"ruleId":"244","severity":1,"message":"245","line":373,"column":58,"nodeType":"246","messageId":"247","endLine":373,"endColumn":60},{"ruleId":"250","severity":1,"message":"251","line":374,"column":38,"nodeType":"252","messageId":"253","endLine":374,"endColumn":40},{"ruleId":"244","severity":1,"message":"245","line":381,"column":57,"nodeType":"246","messageId":"247","endLine":381,"endColumn":59},{"ruleId":"250","severity":1,"message":"251","line":382,"column":38,"nodeType":"252","messageId":"253","endLine":382,"endColumn":40},{"ruleId":"250","severity":1,"message":"254","line":392,"column":56,"nodeType":"252","messageId":"253","endLine":392,"endColumn":58},{"ruleId":"250","severity":1,"message":"254","line":392,"column":83,"nodeType":"252","messageId":"253","endLine":392,"endColumn":85},{"ruleId":"250","severity":1,"message":"254","line":393,"column":56,"nodeType":"252","messageId":"253","endLine":393,"endColumn":58},{"ruleId":"250","severity":1,"message":"254","line":393,"column":82,"nodeType":"252","messageId":"253","endLine":393,"endColumn":84},{"ruleId":"239","severity":1,"message":"255","line":2,"column":15,"nodeType":"241","messageId":"242","endLine":2,"endColumn":25},{"ruleId":"250","severity":1,"message":"254","line":35,"column":26,"nodeType":"252","messageId":"253","endLine":35,"endColumn":28},{"ruleId":"250","severity":1,"message":"254","line":40,"column":26,"nodeType":"252","messageId":"253","endLine":40,"endColumn":28},{"ruleId":"250","severity":1,"message":"254","line":45,"column":26,"nodeType":"252","messageId":"253","endLine":45,"endColumn":28},{"ruleId":"250","severity":1,"message":"251","line":54,"column":26,"nodeType":"252","messageId":"253","endLine":54,"endColumn":28},{"ruleId":"239","severity":1,"message":"257","line":1,"column":27,"nodeType":"241","messageId":"242","endLine":1,"endColumn":33},{"ruleId":"239","severity":1,"message":"258","line":2,"column":8,"nodeType":"241","messageId":"242","endLine":2,"endColumn":16},{"ruleId":"239","severity":1,"message":"259","line":22,"column":7,"nodeType":"241","messageId":"242","endLine":22,"endColumn":15},{"ruleId":"239","severity":1,"message":"260","line":24,"column":5,"nodeType":"241","messageId":"242","endLine":24,"endColumn":20},{"ruleId":"239","severity":1,"message":"261","line":25,"column":5,"nodeType":"241","messageId":"242","endLine":25,"endColumn":20},{"ruleId":"239","severity":1,"message":"262","line":26,"column":5,"nodeType":"241","messageId":"242","endLine":26,"endColumn":15},{"ruleId":"239","severity":1,"message":"263","line":104,"column":12,"nodeType":"241","messageId":"242","endLine":104,"endColumn":18},{"ruleId":"239","severity":1,"message":"264","line":104,"column":20,"nodeType":"241","messageId":"242","endLine":104,"endColumn":29},{"ruleId":"239","severity":1,"message":"265","line":106,"column":10,"nodeType":"241","messageId":"242","endLine":106,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":144,"column":35,"nodeType":"252","messageId":"253","endLine":144,"endColumn":37},{"ruleId":"266","severity":1,"message":"267","line":155,"column":56,"nodeType":"252","messageId":"268","endLine":155,"endColumn":57},{"ruleId":"266","severity":1,"message":"267","line":163,"column":56,"nodeType":"252","messageId":"268","endLine":163,"endColumn":57},{"ruleId":"266","severity":1,"message":"267","line":170,"column":56,"nodeType":"252","messageId":"268","endLine":170,"endColumn":57},{"ruleId":"266","severity":1,"message":"267","line":177,"column":56,"nodeType":"252","messageId":"268","endLine":177,"endColumn":57},{"ruleId":"269","severity":1,"message":"270","line":195,"column":8,"nodeType":"271","endLine":195,"endColumn":27,"suggestions":"272"},{"ruleId":"273","severity":1,"message":"274","line":267,"column":66,"nodeType":"275","messageId":"276","endLine":267,"endColumn":150,"fix":"277"},{"ruleId":"278","severity":1,"message":"279","line":365,"column":45,"nodeType":"275","endLine":365,"endColumn":93},{"ruleId":"278","severity":1,"message":"279","line":394,"column":57,"nodeType":"275","endLine":394,"endColumn":97},{"ruleId":"278","severity":1,"message":"279","line":452,"column":45,"nodeType":"275","endLine":452,"endColumn":93},{"ruleId":"239","severity":1,"message":"256","line":5,"column":8,"nodeType":"241","messageId":"242","endLine":5,"endColumn":13},{"ruleId":"250","severity":1,"message":"251","line":30,"column":31,"nodeType":"252","messageId":"253","endLine":30,"endColumn":33},{"ruleId":"239","severity":1,"message":"257","line":1,"column":27,"nodeType":"241","messageId":"242","endLine":1,"endColumn":33},{"ruleId":"239","severity":1,"message":"258","line":2,"column":8,"nodeType":"241","messageId":"242","endLine":2,"endColumn":16},{"ruleId":"239","severity":1,"message":"260","line":24,"column":5,"nodeType":"241","messageId":"242","endLine":24,"endColumn":20},{"ruleId":"239","severity":1,"message":"261","line":25,"column":5,"nodeType":"241","messageId":"242","endLine":25,"endColumn":20},{"ruleId":"239","severity":1,"message":"262","line":26,"column":5,"nodeType":"241","messageId":"242","endLine":26,"endColumn":15},{"ruleId":"280","severity":1,"message":"281","line":144,"column":25,"nodeType":"282","messageId":"283","endLine":144,"endColumn":31},{"ruleId":"280","severity":1,"message":"281","line":144,"column":52,"nodeType":"282","messageId":"283","endLine":144,"endColumn":58},{"ruleId":"250","severity":1,"message":"251","line":157,"column":31,"nodeType":"252","messageId":"253","endLine":157,"endColumn":33},{"ruleId":"266","severity":1,"message":"267","line":168,"column":52,"nodeType":"252","messageId":"268","endLine":168,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":176,"column":52,"nodeType":"252","messageId":"268","endLine":176,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":183,"column":52,"nodeType":"252","messageId":"268","endLine":183,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":190,"column":52,"nodeType":"252","messageId":"268","endLine":190,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":198,"column":52,"nodeType":"252","messageId":"268","endLine":198,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":206,"column":52,"nodeType":"252","messageId":"268","endLine":206,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":213,"column":52,"nodeType":"252","messageId":"268","endLine":213,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":220,"column":52,"nodeType":"252","messageId":"268","endLine":220,"endColumn":53},{"ruleId":"269","severity":1,"message":"284","line":239,"column":8,"nodeType":"271","endLine":239,"endColumn":27,"suggestions":"285"},{"ruleId":"239","severity":1,"message":"286","line":269,"column":20,"nodeType":"241","messageId":"242","endLine":269,"endColumn":32},{"ruleId":"273","severity":1,"message":"274","line":320,"column":77,"nodeType":"275","messageId":"276","endLine":320,"endColumn":155,"fix":"287"},{"ruleId":"278","severity":1,"message":"279","line":428,"column":45,"nodeType":"275","endLine":428,"endColumn":93},{"ruleId":"278","severity":1,"message":"279","line":457,"column":53,"nodeType":"275","endLine":457,"endColumn":93},{"ruleId":"278","severity":1,"message":"279","line":511,"column":45,"nodeType":"275","endLine":511,"endColumn":93},"no-native-reassign",["288"],"no-negated-in-lhs",["289"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'withRouter' is defined but never used.","'style' is defined but never used.","'useRef' is defined but never used.","'ReactDOM' is defined but never used.","'webgazer' is assigned a value but never used.","'diffXMousePoint' is assigned a value but never used.","'diffYMousePoint' is assigned a value but never used.","'FolderPath' is assigned a value but never used.","'state2' is assigned a value but never used.","'setState2' is assigned a value but never used.","'showBox' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'beforeLineBelongsF1', 'beforeLineBelongsF2', 'beforeLineBelongsF3', 'onDragEnd', 'sourceIndex', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["290"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"291","text":"292"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","React Hook useEffect has missing dependencies: 'beforeLineBelongsF0', 'beforeLineBelongsF1', 'beforeLineBelongsF2', 'beforeLineBelongsF3', 'beforeLineBelongsF4', 'beforeLineBelongsF5', 'beforeLineBelongsFM1', 'onDragEnd', 'sourceIndex', and 'state'. Either include them or remove the dependency array.",["293"],"'UserGreeting' is defined but never used.",{"range":"294","text":"292"},"no-global-assign","no-unsafe-negation",{"desc":"295","fix":"296"},[11620,11620]," rel=\"noreferrer\"",{"desc":"297","fix":"298"},[15072,15072],"Update the dependencies array to be: [beforeLineBelongsF1, beforeLineBelongsF2, beforeLineBelongsF3, onDragEnd, sourceDroppableId, sourceIndex, state]",{"range":"299","text":"300"},"Update the dependencies array to be: [beforeLineBelongsF0, beforeLineBelongsF1, beforeLineBelongsF2, beforeLineBelongsF3, beforeLineBelongsF4, beforeLineBelongsF5, beforeLineBelongsFM1, onDragEnd, sourceDroppableId, sourceIndex, state]",{"range":"301","text":"302"},[8192,8211],"[beforeLineBelongsF1, beforeLineBelongsF2, beforeLineBelongsF3, onDragEnd, sourceDroppableId, sourceIndex, state]",[10883,10902],"[beforeLineBelongsF0, beforeLineBelongsF1, beforeLineBelongsF2, beforeLineBelongsF3, beforeLineBelongsF4, beforeLineBelongsF5, beforeLineBelongsFM1, onDragEnd, sourceDroppableId, sourceIndex, state]"]